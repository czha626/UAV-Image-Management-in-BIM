{
  "Uuid": "57c6a3ab-1e3d-4e71-8b02-e7b306cfdc40",
  "IsCustomNode": false,
  "Description": "",
  "Name": "GHTImageRegistrationDynamoPrototype",
  "ElementResolver": {
    "ResolutionMap": {
      "Color": {
        "Key": "DSCore.Color",
        "Value": "DSCoreNodes.dll"
      },
      "List.Flatten": {
        "Key": "List",
        "Value": "BuiltIn.ds"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Height\";\nwidth = ElementD[0];\nheight = ElementD[1];",
      "Id": "66fb21d4c37c4eab9a3508c820d27056",
      "Inputs": [
        {
          "Id": "ce947c693c1f478191b9ea235b3c69fa",
          "Name": "ElementD",
          "Description": "ElementD",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c96188678b6f4a77ad23638b1f71a2fa",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7329e0eceb8a4983a7515c45693dfc56",
          "Name": "",
          "Description": "width",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "572afedf66ef45128ef82af003544f34",
          "Name": "",
          "Description": "height",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "d3bcdac7cd3d4222898669cfb64557e7",
      "Inputs": [
        {
          "Id": "89cda40e6f8e4326b2014c8928882d90",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "98f001c62d29484b83cc9e8c198ba71c",
          "Name": "parameterName",
          "Description": "The name of the parameter to set.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "06041518765641f1b889a53196ac9cc6",
          "Name": "value",
          "Description": "The value.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b2179a7c6d12411da7e407243961366c",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Views, DSRevitNodesUI",
      "SelectedIndex": 10,
      "SelectedString": "Inspection Image",
      "NodeType": "ExtensionNode",
      "Id": "b6ef88e43f0a4d7ea758f8d133378dc8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b2c183a6e5424429898689069018955c",
          "Name": "Views",
          "Description": "The selected Views",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All views available in the current document."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nboundingBox = IN[0]\r\n\r\n# Place your code below this line\r\nstartPoint = IN[0].MinPoint\r\nendPoint = IN[0].MaxPoint\r\n\r\nx = (startPoint.X + endPoint.X)/2\r\ny = (startPoint.Y + endPoint.Y)/2\r\nz = (startPoint.Z + endPoint.Z - 4010)/2\r\n\r\nwallCenter = Point.ByCoordinates(x,y,z)\r\n# Assign your output to the OUT variable.\r\nOUT = wallCenter",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "d3a3cbcb7ba741bcb0a81270f80c0487",
      "Inputs": [
        {
          "Id": "de75e48eabe94ee9bc89fe785f7c2d20",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d08e7cc35f01494b99a797bcf900a6f7",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.BoundingBox",
      "Id": "308173a2814545d0984fc47b395ada9e",
      "Inputs": [
        {
          "Id": "acace8ce6d884a8a91e9af2ec4d3a42f",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7520c4cd00994461b3cb617e56ca42c3",
          "Name": "BoundingBox",
          "Description": "BoundingBox",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get an Axis-aligned BoundingBox of the Element\n\nElement.BoundingBox: BoundingBox"
    },
    {
      "ConcreteType": "archilabUI.BoxPlacementTypeUi, archilabUI2022",
      "SelectedIndex": 2,
      "SelectedString": "Center",
      "NodeType": "ExtensionNode",
      "Id": "9850d26ce5f248058316ec9186812677",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8d928237d99a43eb83933a6884d1d539",
          "Name": "boxPlacementType",
          "Description": "The selected boxPlacementType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Retrieve all available Box Placement Types"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "archilab.Revit.Elements.ImageInstances.Create@Revit.Elements.Views.View,archilab.Revit.Elements.ImageTypes,archilab.Revit.Elements.ImagePlacementOptions",
      "Id": "3788fe2ec64b4fa68e1586925d5fe566",
      "Inputs": [
        {
          "Id": "af28408b05b8412dada6f515c0047102",
          "Name": "view",
          "Description": "View",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6b3be2d27351417a8ce6425eaaba3eae",
          "Name": "imageType",
          "Description": "ImageTypes",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f388854dd11040aab86a6b88a5a9993b",
          "Name": "imagePlacementOptions",
          "Description": "ImagePlacementOptions",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e443720bab7247148dfbc216e7a8e3ae",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "ImageInstances.Create (view: View, imageType: ImageTypes, imagePlacementOptions: ImagePlacementOptions): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "archilab.Revit.Elements.ImagePlacementOptions.Create@Autodesk.DesignScript.Geometry.Point,string",
      "Id": "737cc21ab93b41f181ddc38723b9020c",
      "Inputs": [
        {
          "Id": "e8c409a13c5147608c3c3b8845feddfa",
          "Name": "location",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2e69e20aa4a8400790096c7f8d3c53d9",
          "Name": "boxPlacementType",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4bb7a14b31264c8b87c2ea94204bf104",
          "Name": "ImagePlacementOptions",
          "Description": "ImagePlacementOptions",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "ImagePlacementOptions.Create (location: Point, boxPlacementType: string): ImagePlacementOptions"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "archilab.Revit.Elements.ImageTypes.Create@archilab.Revit.Elements.ImageTypeOptions,bool",
      "Id": "570fe59bd68d4da1acba976fe372ef4a",
      "Inputs": [
        {
          "Id": "0c3fdb0e3f9344278f6169c6717280e8",
          "Name": "imageTypeOptions",
          "Description": "Image Type Options object.\n\nImageTypeOptions",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e0aa8e295fce4889b413b14b8c5899e7",
          "Name": "reload",
          "Description": "If true reload existing document, otherwise create new one.\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "396750b5881c49f6a479716dab0d22dd",
          "Name": "ImageTypes",
          "Description": "Image Type object.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new Image Type import object.\n\nImageTypes.Create (imageTypeOptions: ImageTypeOptions, reload: bool = true): ImageTypes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "archilab.Revit.Elements.ImageTypeOptions.Create@string",
      "Id": "54c5083059a140df86f4a09046e595bb",
      "Inputs": [
        {
          "Id": "bada8f1689a84aed80e82541611c3063",
          "Name": "filePath",
          "Description": "File path to Image.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a86963fef3734d018cb96f2911cf61e2",
          "Name": "ImageTypeOptions",
          "Description": "Image Type Options object.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates Image Type Options for image import.\n\nImageTypeOptions.Create (filePath: string): ImageTypeOptions"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[[0,-10586,0,0,0],[-16125,-10586,0,0,0]];",
      "Id": "99592d45a3d944db8927c6f80f75b076",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "008ff618403c4905a97bc624f96bad46",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "D:/Test",
      "Id": "33c4ffb150724a5691462efde0af596c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "83d82d5e3ecf42478a1a73b3c3c28253",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2023, Cheng ZHANG\r\n\r\n# Load the Python Standard and DesignScript Libraries\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport sys\r\nsys.path.append('E:\\Anaconda\\envs\\MYGHT\\Lib\\site-packages')\r\nimport System\r\nimport os\r\nimport math\r\nfrom pyproj import CRS\r\nfrom pyproj import Transformer\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n#transfer gps data to decimal\r\ndef decimal_coords(coords, ref):\r\n decimal_degrees = coords[0] + coords[1] / 60 + coords[2] / 3600\r\n if ref == 'S' or ref == 'W':\r\n     decimal_degrees = -decimal_degrees\r\n return decimal_degrees\r\n \r\n#WGS84坐标转高斯坐标\r\ncrs_WGS84 = CRS.from_epsg(4326)  # WGS84地理坐标系\r\ndef WGS84ToGK_Single(lat, lon):\r\n    \"\"\"\r\n    WGS84坐标转高斯坐标\r\n    :param lat:  WGS84坐标纬度\r\n    :param lon:  WGS84坐标经度\r\n    :return: 高斯坐标x,y\r\n    \"\"\"\r\n    d = int((lon + 1.5) / 3)\r\n    format = '+proj=tmerc +lat_0=0 +lon_0=' + str(d * 3) + ' +k=1 +x_0=500000 +y_0=0 +ellps=WGS84 +units=m +no_defs'\r\n    crs_GK = CRS.from_proj4(format)\r\n    transformer = Transformer.from_crs(crs_WGS84, crs_GK)\r\n    x, y = transformer.transform(lat, lon)\r\n    return x, y\r\n\r\n#Calculate the transfer matrix from local coordinates to BIM coordinates\r\ndef transfermatrix_local_to_bim(locP1,locP2,bimP1,bimP2):\r\n    locx1 = locP1[0]\r\n    locy1 = locP1[1]\r\n    locz1 = locP1[2]\r\n    locx2 = locP2[0]\r\n    locy2 = locP2[1]\r\n    bimx1 = bimP1[0]\r\n    bimy1 = bimP1[1]\r\n    bimz1 = bimP1[2]\r\n    bimx2 = bimP2[0]\r\n    bimy2 = bimP2[1]\r\n    cosangle = ((locx1-locx2)*(bimx1-bimx2)+(locy1-locy2)*(bimy1-bimy2))/((locx1-locx2)**2+(locy1-locy2)**2)\r\n    sinangle = ((locx1-locx2)*(bimy1-bimy2)-(locy1-locy2)*(bimx1-bimx2))/((locx1-locx2)**2+(locy1-locy2)**2)\r\n    dx = bimx1-locx1*cosangle+locy1*sinangle\r\n    dy = bimy1-locx1*sinangle-locy1*cosangle\r\n    dz = 1000*locz1-bimz1\r\n    transfermatrix = [cosangle,sinangle,dx,dy,dz]\r\n    return transfermatrix\r\n\r\nrefGPSPoints = IN[0]\r\nBIMrefPoint = IN[1]\r\nImageGPS = []\r\nfor i in range(len(refGPSPoints)): \r\n    GPS = refGPSPoints[i]\r\n    lat = GPS[0]\r\n    lon = GPS[1]\r\n    alt = GPS[2]\r\n    [localx,localy] = WGS84ToGK_Single(lat, lon)\r\n    GPScoords = [localx,localy,alt]\r\n    ImageGPS.append(GPScoords)\r\n\r\nlocP1 = ImageGPS[0]\r\nlocP2 = ImageGPS[1]\r\nbimP1 = BIMrefPoint[0]\r\nbimP2 = BIMrefPoint[1]\r\n\r\ntransfermatrix = transfermatrix_local_to_bim(locP1,locP2,bimP1,bimP2)\r\n# Assign your output to the OUT variable.\r\nOUT = transfermatrix",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "2b8bbe888fa548a6b19f9c8b553c7c6c",
      "Inputs": [
        {
          "Id": "88ca3ead33f74441be946419184b65e9",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ee3a53b5a8e849b5a077528bd7c0b168",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5f74066e375249fb9417bba224f732a5",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2023, Cheng ZHANG\r\n\r\n# Load the Python Standard and DesignScript Libraries\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport sys\r\nsys.path.append('E:\\Anaconda\\envs\\MYGHT\\Lib\\site-packages')\r\nimport exif\r\nfrom exif import Image\r\nimport System\r\nimport os\r\nimport math\r\nfrom pyproj import CRS\r\nfrom pyproj import Transformer\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n#transfer gps data to decimal\r\ndef decimal_coords(coords, ref):\r\n decimal_degrees = coords[0] + coords[1] / 60 + coords[2] / 3600\r\n if ref == 'S' or ref == 'W':\r\n     decimal_degrees = -decimal_degrees\r\n return decimal_degrees\r\n\r\n#WGS84坐标转高斯坐标\r\ncrs_WGS84 = CRS.from_epsg(4326)  # WGS84地理坐标系\r\ndef WGS84ToGK_Single(lat, lon):\r\n    \"\"\"\r\n    WGS84坐标转高斯坐标\r\n    :param lat:  WGS84坐标纬度\r\n    :param lon:  WGS84坐标经度\r\n    :return: 高斯坐标x,y\r\n    \"\"\"\r\n    d = int((lon + 1.5) / 3)\r\n    format = '+proj=tmerc +lat_0=0 +lon_0=' + str(d * 3) + ' +k=1 +x_0=500000 +y_0=0 +ellps=WGS84 +units=m +no_defs'\r\n    crs_GK = CRS.from_proj4(format)\r\n    transformer = Transformer.from_crs(crs_WGS84, crs_GK)\r\n    x, y = transformer.transform(lat, lon)\r\n    return x, y\r\n\r\n# Place your code below this line\r\n#file_root = IN[0]\r\nGPSPoints = IN[0]\r\ntransfermatrix = IN[1]\r\nfile_root = IN[2]+'/UAV image'\r\nfiletype = '.JPG'\r\nfile_list = os.listdir(file_root)\r\nName = []\r\nfor img_name in file_list:\r\n    Name.append(img_name)\r\n\r\ncosangle = transfermatrix[0]\r\nsinangle = transfermatrix[1]\r\ndx = transfermatrix[2]\r\ndy = transfermatrix[3]\r\ndz = transfermatrix[4]\r\n\r\nImageGPS = []\r\n#ImagePath = []\r\nImageName = []\r\n\r\nfor i in range(len(GPSPoints)): \r\n    GPS = GPSPoints[i]\r\n    lat = GPS[0]\r\n    lon = GPS[1]\r\n    alt = GPS[2]\r\n    [localx,localy] = WGS84ToGK_Single(lat, lon)\r\n    bimx = round(localx*cosangle-localy*sinangle+dx)\r\n    bimy = round(localx*sinangle+localy*cosangle+dy)\r\n    bimz = round(1000*alt-dz)\r\n    GPScoords = [Name[i],bimx,bimy,bimz,0,0]\r\n    ImageGPS.append(GPScoords)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = ImageGPS",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "bec8cc6fbb244913907ed61c05177f1a",
      "Inputs": [
        {
          "Id": "9f39ec121b5c4cd08ecdc57f358bfc45",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "00493bdf169d44239298bffba4a283fc",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "90a15b0123aa45508b37658c6b3cd4ed",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "22c99080d45140d4bfc72abfb65a0ee5",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2023, Cheng ZHANG\r\n\r\n# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport os\r\nsys.path.append('E:\\Anaconda\\envs\\MYGHT\\Lib\\site-packages')\r\n#localapp = os.getenv(r'LOCALAPPDATA')\r\n#sys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\nimport numpy as np\r\nimport cv2\r\nfrom matplotlib import pyplot as plt\r\nimport sys\r\n\r\n#some basic functions for ease\r\ndef load_img(name: str,mode: int) -> np.ndarray:\r\n    return cv2.imread(name, mode)\r\n\r\ndef show_img(title: str,img: np.ndarray,wait: int) -> int:\r\n    cv2.imshow(title, img)\r\n    k = cv2.waitKey(wait)\r\n    cv2.destroyWindow(title)\r\n    return k\r\n\r\ndef save_img(name,img):\r\n    if type(name) == str:\r\n        cv2.imwrite(name, img)\r\n    else:\r\n        [cv2.imwrite(\"out/\"+n+\".jpg\",i) for n,i in zip(name,img)]\r\n\r\n#finding edge positions only\r\ndef getEdgePositions(img):\r\n    positions = []\r\n    m, n = img.shape\r\n    for a in range(m):\r\n        for b in range(n):\r\n            if (img[a, b]!=0):\r\n                positions.append((a, b))\r\n    return positions\r\n\r\n#finding edge positions considering the GPS error\r\ndef getEdgePositionsWithinGPSError(img,GPSRange):\r\n    positions = []\r\n    m, n = GPSRange.shape\r\n    for a in range(m):\r\n        for b in range(n):\r\n            if (img[a, b]!=0) and (GPSRange[a, b]!=0) and a>100 and b>300 and b<600:\r\n                positions.append((a, b))\r\n    return positions\r\n\r\n#Calculate the searching range based on the template image and GPS errors\r\ndef SetMatchingRange(template,GPSError):\r\n    # convert template to grayscale\r\n    gray = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)\r\n    # make anything not white into black\r\n    mask = gray.copy()\r\n    mask[mask!=255] = 0\r\n    # invert mask so center is white and outside is black\r\n    mask = 255 - mask\r\n    # close open mask to clean up small regions and make 3 channels\r\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5,5))\r\n    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)\r\n    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)\r\n    mask = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)\r\n    # erode mask\r\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, GPSError)\r\n    erode = cv2.morphologyEx(mask, cv2.MORPH_ERODE, kernel)\r\n    # dilate mask and make 3 channels\r\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, GPSError)\r\n    dilate = cv2.morphologyEx(mask, cv2.MORPH_DILATE, kernel)\r\n    # merge image onto dilated mask using mask\r\n    result = np.where(mask==(255,255,255), mask, dilate)\r\n    # merge inverted erode onto result using erode\r\n    result = np.where(erode==(255,255,255), (255-erode), result)\r\n    GPSRange = cv2.cvtColor(result, cv2.COLOR_BGR2GRAY)\r\n    return GPSRange\r\n\r\n#reference point is taken as avg of all edge positions pixels\r\ndef getReferencePoint(edgePositions):\r\n    a = 0\r\n    b = 0\r\n    for i in range(len(edgePositions)):\r\n        a = a + edgePositions[i][0]\r\n        b = b + edgePositions[i][1]\r\n    a = a/len(edgePositions)\r\n    b = b/len(edgePositions)\r\n    return (int(a), int(b))\r\n\r\n#constructing the R-table to get structure of template\r\ndef rTable(img, refPoint, edgePositions):\r\n    sobelx64f = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5)   #possibly tweaked\r\n    abs_sobel64f = np.absolute(sobelx64f)\r\n    rTable = {}\r\n    for i, point in enumerate(edgePositions):\r\n        rx = refPoint[0] - point[0]\r\n        ry = refPoint[1] - point[1]\r\n        r = (rx, ry)\r\n        phi = abs_sobel64f[point[0], point[1]]\r\n        if(phi not in list(rTable.keys())):\r\n            rTable[phi] = [r]\r\n        else:\r\n            rTable[phi].append(r)\r\n    rTable['refPoint'] = refPoint\r\n    return rTable\r\n\r\n#finding rTable for all theta with a jump of angle degrees. The tables are all stored in a list of length 360/angle.\r\ndef rTableWithRotation(templateCanny, angleRange, angle):\r\n    print('Constructing rTable started')\r\n    rTableWithRotation = []\r\n    rows, columns = templateCanny.shape\r\n    for i in range(int(angleRange/angle)):\r\n        theta = angle*i\r\n        M = cv2.getRotationMatrix2D((columns/angle,rows/angle),theta,1)\r\n        templateCannyRotated = cv2.warpAffine(templateCanny,M,(columns,rows))\r\n        templateEdgePositions = getEdgePositions(templateCannyRotated)\r\n        templateRefPoint = getReferencePoint(templateEdgePositions)\r\n        rTableTheta = rTable(templateCannyRotated, templateRefPoint, templateEdgePositions)\r\n        rTableWithRotation.append(rTableTheta)\r\n    print('Constructing rTable finished')\r\n    return rTableWithRotation\r\n\r\n#finding the accumulatorTable for the main picture\r\ndef accumulatorTable(pictureCanny, template_rTable, GPSRange, angleRange, angle):\r\n    print('Matching process started')\r\n    rows = pictureCanny.shape[0]\r\n    columns = pictureCanny.shape[1]\r\n    \r\n    #refPoint = template_rTable[0]['refPoint']\r\n    #pictureEdgePositions = getEdgePositions(pictureCanny)\r\n    \r\n    pictureEdgePositions = getEdgePositionsWithinGPSError(pictureCanny,GPSRange)\r\n    \r\n    accumulatorTable = np.ndarray((int(angleRange/angle), rows, columns))\r\n    sobelx64f = cv2.Sobel(pictureCanny,cv2.CV_64F,1,0,ksize=5)\r\n    abs_sobel64f = np.absolute(sobelx64f)\r\n    \r\n    for theta, rTableTheta in enumerate(template_rTable):\r\n        for i, edgePoint in enumerate(pictureEdgePositions):\r\n            phi = abs_sobel64f[edgePoint[0], edgePoint[1]]\r\n            if (phi in list(rTableTheta.keys())):\r\n                temp = rTableTheta[phi]\r\n                for r, vector in enumerate(temp):\r\n                    x = edgePoint[0] + vector[0]\r\n                    y = edgePoint[1] + vector[1]\r\n                    if (x>=0 and x<rows) and (y>=0 and y<columns):\r\n                        accumulatorTable[theta, x, y]+=1\r\n            else:\r\n                continue\r\n    print('Matching process finished')\r\n    return accumulatorTable\r\n\r\n#getting back the original image\r\ndef reconstruction(rTable, theta, a, b, pictureCanny,GPSRange, angle):\r\n    print('Reconstruction process started')\r\n    rTable = rTable[int(theta)]\r\n    \r\n    #pictureEdgePositions = getEdgePositions(pictureCanny)\r\n    \r\n    pictureEdgePositions = getEdgePositionsWithinGPSError(pictureCanny,GPSRange)\r\n    draw = np.ones_like(pictureCanny)*255\r\n    mask = np.ones_like(pictureCanny)*255\r\n    maskingPoints = []\r\n    maskingPointsReal= []\r\n    rows = pictureCanny.shape[0]\r\n    columns = pictureCanny.shape[1]\r\n    sobelx64f = cv2.Sobel(pictureCanny,cv2.CV_64F,1,0,ksize=5)\r\n    abs_sobel64f = np.absolute(sobelx64f)\r\n\r\n    for i, edgePoint in enumerate(pictureEdgePositions):\r\n        phi = abs_sobel64f[edgePoint[0], edgePoint[1]]\r\n        if (phi in list(rTable.keys())):\r\n            temp = rTable[phi]\r\n            for r, vector in enumerate(temp):\r\n                x = a - vector[0]\r\n                y = b - vector[1]\r\n                x1 = edgePoint[0]\r\n                y1 = edgePoint[1]\r\n                if (x>=0 and x<rows) and (y>=0 and y<columns):\r\n                    cv2.circle(draw,(y, x), 1, (0,0,255), -1)\r\n                    cv2.circle(mask,(y1, x1), 1, (0,0,255), -1)\r\n                    maskingPoints.append((y, x))\r\n                    maskingPointsReal.append((y1,x1))\r\n        else:\r\n            continue\r\n    \r\n    maskingPoints = list(set(maskingPoints))\r\n    maskingPointsReal = list(set(maskingPointsReal))\r\n\r\n    #cv2.fillConvexPoly(mask, np.int32(maskingPoints), (1.0, 1.0, 1.0), 16, 0)\r\n\r\n    # M = cv2.getRotationMatrix2D((columns/angle,rows/angle),theta*angle,1)\r\n    # print(theta*angle)\r\n    # mask = cv2.warpAffine(mask,M,(columns,rows))\r\n    cv2.imwrite('C:/Users/19644/Desktop/draw.png',draw)\r\n    cv2.imwrite('C:/Users/19644/Desktop/mask.png',mask)\r\n    print('Reconstruction process finished')\r\n    return draw, maskingPoints, maskingPointsReal\r\n\r\ndef get_distance_point2line(point, line):\r\n    \"\"\"\r\n    Args:\r\n        point: [x0, y0]\r\n        line: [x1, y1, x2, y2]\r\n    \"\"\"\r\n    line_point1, line_point2 = np.array(line[0:2]), np.array(line[2:])\r\n    vec1 = line_point1 - point\r\n    vec2 = line_point2 - point\r\n    distance = np.abs(np.cross(vec1, vec2)) / np.linalg.norm(line_point1 - line_point2)\r\n    return distance\r\n\r\n#计算平均差\r\ndef meandev(numbers):\r\n    mean = sum(numbers)/len(numbers)\r\n    dev = 0\r\n    for n in numbers:\r\n        dev = dev + abs(n-mean)\r\n    \r\n    return dev\r\n\r\n# 计算两直线交点函数\r\ndef cross_point(line1,line2):\r\n    x1=line1[0]\r\n    y1=line1[1]\r\n    x2=line1[2]\r\n    y2=line1[3]\r\n    \r\n    x3=line2[0]\r\n    y3=line2[1]\r\n    x4=line2[2]\r\n    y4=line2[3]\r\n    \r\n    # L2直线斜率不存在操作\r\n    if (x4-x3)==0:\r\n        k2=None\r\n        b2=0\r\n        x=x3\r\n        # 计算k1,由于点均为整数，需要进行浮点数转化\r\n        k1=(y2-y1)*1.0/(x2-x1)\r\n        # 整型转浮点型是关键\r\n        b1=y1*1.0-x1*k1*1.0\r\n        y=k1*x*1.0+b1*1.0\r\n    elif (x2-x1)==0:\r\n        k1=None\r\n        b1=0\r\n        x=x1\r\n        k2=(y4-y3)*1.0/(x4-x3)\r\n        b2=y3*1.0-x3*k2*1.0\r\n        y=k2*x*1.0+b2*1.0\r\n    else:\r\n        # 计算k1,由于点均为整数，需要进行浮点数转化\r\n        k1=(y2-y1)*1.0/(x2-x1)\r\n        # 斜率存在操作\r\n        k2=(y4-y3)*1.0/(x4-x3) \r\n        # 整型转浮点型是关键\r\n        b1=y1*1.0-x1*k1*1.0\r\n        b2=y3*1.0-x3*k2*1.0\r\n        x=(b2-b1)*1.0/(k1-k2)\r\n        y=k1*x*1.0+b1*1.0    \r\n    return [x,y]\r\n\r\ndef EdgeFitting(maskingPointsFinal):\r\n    coordinates = [[[],[]],[[],[]],[[],[]],[[],[]]]\r\n    for i, MaskingPointF in enumerate(maskingPointsFinal):\r\n        for j, maskingP in enumerate(MaskingPointF):\r\n            coordinates[i][0].append(maskingP[0])\r\n            coordinates[i][1].append(maskingP[1])\r\n    \r\n    #对分类到边缘段的每组点进行线性拟合\r\n    lines = []\r\n    for i, Coords in enumerate(coordinates):\r\n        x = Coords[0]\r\n        y = Coords[1]\r\n        xdev = meandev(x)\r\n        ydev = meandev(y)\r\n        if xdev < ydev:\r\n            poly = np.polyfit(y,x,deg=1)\r\n            y1 = min(y)\r\n            y2 = max(y)\r\n            x1 = np.polyval(poly, y1)\r\n            x2 = np.polyval(poly, y2)\r\n        else:\r\n            poly = np.polyfit(x,y,deg=1)\r\n            x1 = min(x)\r\n            x2 = max(x)\r\n            y1 = np.polyval(poly, x1)\r\n            y2 = np.polyval(poly, x2)\r\n        lines.append([x1,y1,x2,y2])\r\n    \r\n    #计算拟合后四条直线的所有交点\r\n    crossPoint = []\r\n    xmin = 3000\r\n    xmax = 0\r\n    ymin = 3000\r\n    ymax = 0\r\n    for i, line1 in enumerate(lines):\r\n        for j, line2 in enumerate(lines):\r\n            if line1 != line2:\r\n                x1=line1[0]\r\n                y1=line1[1]\r\n                x2=line1[2]\r\n                y2=line1[3]\r\n                \r\n                x3=line2[0]\r\n                y3=line2[1]\r\n                x4=line2[2]\r\n                y4=line2[3]\r\n                \r\n                ee = 50\r\n                if abs(x1-x2) < ee:\r\n                    if abs(x3-x4) > ee:\r\n                        xy = cross_point(line1,line2)\r\n                        crossPoint.append(xy)\r\n                        if xy[0] < xmin:\r\n                            xmin = xy[0]\r\n                        if xy[0] > xmax:\r\n                            xmax = xy[0]\r\n                        if xy[1] < ymin:\r\n                            ymin = xy[1]\r\n                        if xy[1] > ymax:\r\n                            ymax = xy[1]\r\n                else:\r\n                    if abs(x3-x4) < ee:\r\n                        xy = cross_point(line1,line2)\r\n                        crossPoint.append(xy)\r\n                        if xy[0] < xmin:\r\n                            xmin = xy[0]\r\n                        if xy[0] > xmax:\r\n                            xmax = xy[0]\r\n                        if xy[1] < ymin:\r\n                            ymin = xy[1]\r\n                        if xy[1] > ymax:\r\n                            ymax = xy[1]\r\n    \r\n    #分类交点，获取对应四角点的坐标\r\n    leftUp = []\r\n    leftDown = []\r\n    rightUp = []\r\n    rightDown = []\r\n    for i, crossP in enumerate(crossPoint):\r\n        ee = 100\r\n        if abs(crossP[0]-xmin) < ee:\r\n            if abs(crossP[1]-ymax) < ee:\r\n                leftUp = crossP\r\n            elif abs(crossP[1]-ymin) < ee:\r\n                leftDown = crossP\r\n        elif abs(crossP[0]-xmax) < ee:\r\n            if abs(crossP[1]-ymax) < ee:\r\n                rightUp = crossP\r\n            elif abs(crossP[1]-ymin) < ee:\r\n                rightDown = crossP\r\n    \r\n    return leftUp, leftDown, rightUp, rightDown\r\n\r\n#考虑弧形窗户的边界点分组\r\ndef reconstructionMatchingWithArcTop(maskingPoints,maskingPointsReal, draw):\r\n    print('Reconstruction matching started')\r\n    \r\n    xcoord = []\r\n    ycoord = []\r\n    for i, templateMaskingPoint in enumerate(maskingPoints):\r\n        xcoord.append(templateMaskingPoint[0])\r\n        ycoord.append(templateMaskingPoint[1])\r\n        \r\n    xmin = min(xcoord)\r\n    xmax = max(xcoord)\r\n    ymin = min(ycoord)\r\n    ymax = max(ycoord)\r\n    \r\n    maskingPointsCategory = [[],[],[],[]]\r\n    for i, templateMaskingPoint in enumerate(maskingPoints):\r\n        dis = 2\r\n        x = templateMaskingPoint[0]\r\n        y = templateMaskingPoint[1]\r\n        if abs(x-xmin) < dis and abs(y-ymax) > dis:\r\n            maskingPointsCategory[0].append(templateMaskingPoint)\r\n        elif abs(x-xmax) < dis and abs(y-ymax) > dis:\r\n            maskingPointsCategory[1].append(templateMaskingPoint)\r\n        elif abs(y-ymax) < dis and abs(x-xmax) > dis and abs(x-xmin) > dis:\r\n            maskingPointsCategory[2].append(templateMaskingPoint)\r\n        elif abs(y-ymax) > 20 and abs(x-xmax) > dis and abs(x-xmin) > dis:\r\n            maskingPointsCategory[3].append(templateMaskingPoint)\r\n    \r\n    lineNum = 3\r\n    for i, tempPoint in enumerate(maskingPointsReal):\r\n        ycoord.append(tempPoint[1])\r\n    ymaxR = max(ycoord)\r\n    \r\n    maskingPointsFinal = [[],[],[],[]]\r\n    drawFinal = np.ones_like(draw)*255\r\n    \r\n    for j, templateMaskingPoint in enumerate(maskingPointsCategory[0]):\r\n        dis = 100000\r\n        for k, realMaskingPoint in enumerate(maskingPointsReal):\r\n            dy = abs(templateMaskingPoint[1] - realMaskingPoint[1])\r\n            dx = realMaskingPoint[0] - templateMaskingPoint[0]\r\n            if dy < 2 and dx < dis:\r\n                dis = dx\r\n                tempMaskingPoint = realMaskingPoint\r\n        if abs(dis) < 20:\r\n            maskingPointsFinal[0].append(tempMaskingPoint)\r\n    \r\n    for j, templateMaskingPoint in enumerate(maskingPointsCategory[1]):\r\n        dis = -100000\r\n        for k, realMaskingPoint in enumerate(maskingPointsReal):\r\n            dy = abs(templateMaskingPoint[1] - realMaskingPoint[1])\r\n            dx = realMaskingPoint[0] - templateMaskingPoint[0]\r\n            if dy < 2 and dx > dis:\r\n                dis = dx\r\n                tempMaskingPoint = realMaskingPoint\r\n        if abs(dis) < 20:\r\n            maskingPointsFinal[1].append(tempMaskingPoint)\r\n    \r\n    for j, templateMaskingPoint in enumerate(maskingPointsCategory[2]):\r\n        dis = -100000\r\n        for k, realMaskingPoint in enumerate(maskingPointsReal):\r\n            dy = realMaskingPoint[1] - templateMaskingPoint[1]\r\n            dx = abs(templateMaskingPoint[0] - realMaskingPoint[0])\r\n            if dx < 2 and dy > dis:\r\n                dis = dy\r\n                tempMaskingPoint = realMaskingPoint\r\n        if abs(dis) < 20:\r\n            maskingPointsFinal[2].append(tempMaskingPoint)\r\n    \r\n    for j, templateMaskingPoint in enumerate(maskingPointsCategory[2]):\r\n        dis = 100000\r\n        for k, realMaskingPoint in enumerate(maskingPointsReal):\r\n            dy = abs(templateMaskingPoint[1] - realMaskingPoint[1])\r\n            dx = abs(templateMaskingPoint[0] - realMaskingPoint[0])\r\n            dis1 = max([dx,dy])\r\n            if dis1 < dis:\r\n                dis = dis1\r\n                tempMaskingPoint = realMaskingPoint\r\n        if dis < 20:\r\n            maskingPointsFinal[3].append(tempMaskingPoint)\r\n    \r\n    print('Reconstruction matching finished')\r\n    return drawFinal, maskingPointsFinal, lineNum\r\n\r\ndef EdgeFittingWithArcTop(maskingPointsFinal, lineNum):\r\n    if lineNum == 4:\r\n        LineCoordinates = [[[],[]],[[],[]],[[],[]],[[],[]]]\r\n        ArcCoordinates = []\r\n        for i, MaskingPointF in enumerate(maskingPointsFinal):\r\n            for j, maskingP in enumerate(MaskingPointF):\r\n                LineCoordinates[i][0].append(maskingP[0])\r\n                LineCoordinates[i][1].append(maskingP[1])\r\n    elif lineNum == 3:\r\n        LineCoordinates = [[[],[]],[[],[]],[[],[]]]\r\n        ArcCoordinates = []\r\n        xCoord = []\r\n        yCoord = []\r\n        for i, MaskingPointF in enumerate(maskingPointsFinal):\r\n            if i == 3:\r\n                for j, maskingP in enumerate(MaskingPointF):\r\n                    if xCoord != []:\r\n                        if maskingP[0] not in xCoord:\r\n                            xCoord.append(maskingP[0])\r\n                            yCoord.append(maskingP[1])\r\n                            ArcCoordinates.append((maskingP[0],maskingP[1]))\r\n                    else:\r\n                        xCoord.append(maskingP[0])\r\n                        yCoord.append(maskingP[1])\r\n                        ArcCoordinates.append((maskingP[0],maskingP[1]))\r\n                    #ArcCoordinates.append((maskingP[0],maskingP[1]))\r\n            else:\r\n                for j, maskingP in enumerate(MaskingPointF):\r\n                    LineCoordinates[i][0].append(maskingP[0])\r\n                    LineCoordinates[i][1].append(maskingP[1])\r\n    \r\n    \r\n    #对分类到边缘段的每组点进行线性拟合\r\n    lines = []\r\n    for i, Coords in enumerate(LineCoordinates):\r\n        x = Coords[0]\r\n        y = Coords[1]\r\n        xdev = meandev(x)\r\n        ydev = meandev(y)\r\n        if xdev < ydev:\r\n            poly = np.polyfit(y,x,deg=1)\r\n            y1 = min(y)\r\n            y2 = max(y)\r\n            x1 = np.polyval(poly, y1)\r\n            x2 = np.polyval(poly, y2)\r\n            ArcCoordinates.append((round(x1),y1))\r\n        else:\r\n            poly = np.polyfit(x,y,deg=1)\r\n            x1 = min(x)\r\n            x2 = max(x)\r\n            y1 = np.polyval(poly, x1)\r\n            y2 = np.polyval(poly, x2)\r\n            yMean = np.mean(y)\r\n        lines.append([x1,y1,x2,y2])\r\n    \r\n    if lineNum == 3:\r\n        yMean2 = np.mean(yCoord)\r\n        ArcCoordinates.sort(key=lambda x:x[0],reverse=False)\r\n        xArc = []\r\n        yArc = []\r\n        #img_copy = load_img(img_path,1)\r\n        for point in ArcCoordinates:\r\n            if abs(point[1] - yMean) > 100 and abs(point[1] - yMean2) < 500:\r\n                xArc.append(point[0])\r\n                yArc.append(point[1])\r\n                #cv2.circle(img_copy,(point[0],point[1]), 1, (255,0,0), -1)\r\n        #cv2.imwrite('C:/Users/19644/Desktop/img_copy.png',img_copy)\r\n        \r\n        #曲线边缘插值拟合\r\n        xArc = np.array(xArc)\r\n        yArc = np.array(yArc)\r\n        coff = np.polyfit(xArc,yArc,5)\r\n        def fitresult(xx):\r\n            result = coff[0]*pow(xx,5) + coff[1]*pow(xx,4) + coff[2]*pow(xx,3) + coff[3]*pow(xx,2) + coff[4]*xx + coff[5]\r\n            return result\r\n        \r\n   \r\n    #计算所有拟合线段交点\r\n    crossPoint = []\r\n    for i, line1 in enumerate(lines):\r\n        for j, line2 in enumerate(lines):\r\n            x1=line1[0]\r\n            y1=line1[1]\r\n            x2=line1[2]\r\n            y2=line1[3]\r\n            \r\n            x3=line2[0]\r\n            y3=line2[1]\r\n            x4=line2[2]\r\n            y4=line2[3]\r\n            \r\n            k1 = abs((y1-y2)/(x1-x2))\r\n            k2 = abs((y3-y4)/(x3-x4))\r\n            \r\n            if k1 > 1:\r\n                if k2 < 1:\r\n                    xy = cross_point(line1,line2)\r\n                    crossPoint.append(xy)\r\n            else:\r\n                if k2 > 1:\r\n                    xy = cross_point(line1,line2)\r\n                    crossPoint.append(xy)\r\n    if lineNum == 3:\r\n        for i, line in enumerate(lines):\r\n            x1 = line[0]\r\n            x2 = line[2]\r\n            if abs(x1-x2) < abs(line[1]-line[3]):\r\n                xCross = x1\r\n                yCross = float(fitresult(xCross))\r\n                xy = [xCross,yCross]\r\n                crossPoint.append(xy)\r\n    \r\n    xmin = 6000\r\n    xmax = 0\r\n    ymin = 6000\r\n    ymax = 0\r\n    for i, line in enumerate(lines):\r\n        if xmin > min([line[0],line[2]]):\r\n            xmin = min([line[0],line[2]])\r\n        if xmax < max([line[0],line[2]]):\r\n            xmax = max([line[0],line[2]])\r\n        if ymin > min([line[1],line[3]]):\r\n            ymin = min([line[1],line[3]])\r\n        if ymax < max([line[1],line[3]]):\r\n            ymax = max([line[1],line[3]])\r\n    \r\n    #分类交点，获取对应四角点的坐标\r\n    leftUp = []\r\n    leftDown = []\r\n    rightUp = []\r\n    rightDown = []\r\n    for i, crossP in enumerate(crossPoint):\r\n        ee = 100\r\n        if abs(crossP[0]-xmin) < ee:\r\n            if abs(crossP[1]-ymax) < ee:\r\n                leftUp = crossP\r\n            elif abs(crossP[1]-ymin) < ee:\r\n                leftDown = crossP\r\n        elif abs(crossP[0]-xmax) < ee:\r\n            if abs(crossP[1]-ymax) < ee:\r\n                rightUp = crossP\r\n            elif abs(crossP[1]-ymin) < ee:\r\n                rightDown = crossP\r\n    \r\n    \r\n    downAverage = (leftDown[1]+rightDown[1])/2\r\n    leftDown[1] = downAverage\r\n    rightDown[1] = downAverage\r\n    \r\n    return leftUp, leftDown, rightUp, rightDown\r\n\r\ndef hough(picture,template,GPSError,angleRange,angle,img_name,InsImage,ImgCoordinates):\r\n    pictureCanny = cv2.Canny(picture, 80, 160)\r\n    #cv2.imwrite('C:/Users/19644/Desktop/pictureCanny.png',pictureCanny)\r\n    templateCanny = cv2.Canny(template, 100, 200)\r\n    #cv2.imwrite('C:/Users/19644/Desktop/templateCanny.png',templateCanny)\r\n    GPSRange = SetMatchingRange(template,GPSError)\r\n    #cv2.imwrite('C:/Users/19644/Desktop/GPSRange.png',GPSRange)\r\n    template_rTable = rTableWithRotation(templateCanny,angleRange, angle)\r\n    picture_accumulatorTable = accumulatorTable(pictureCanny, template_rTable,GPSRange,angleRange, angle)\r\n    theta, a, b = np.unravel_index(picture_accumulatorTable.argmax(),picture_accumulatorTable.shape)\r\n    draw, maskingPoints, maskingPointsReal = reconstruction(template_rTable, theta, a, b, pictureCanny,GPSRange,angle)\r\n    drawFinal, maskingPointsFinal, lineNum = reconstructionMatchingWithArcTop(maskingPoints,maskingPointsReal, draw)\r\n    leftUp, leftDown, rightUp, rightDown = EdgeFittingWithArcTop(maskingPointsFinal, lineNum)\r\n    \r\n    SaveInfo = [img_name, leftUp, leftDown, rightUp, rightDown]\r\n    ImgCoordinates.append(SaveInfo)\r\n    cv2.line(InsImage, (round(leftUp[0]), round(leftUp[1])), (round(leftDown[0]), round(leftDown[1])), (0, 0, 255), 2)\r\n    cv2.line(InsImage, (round(leftUp[0]), round(leftUp[1])), (round(rightUp[0]), round(rightUp[1])), (0, 0, 255), 2)\r\n    cv2.line(InsImage, (round(rightDown[0]), round(rightDown[1])), (round(rightUp[0]), round(rightUp[1])), (0, 0, 255), 2)\r\n    cv2.line(InsImage, (round(rightDown[0]), round(rightDown[1])), (round(leftDown[0]), round(leftDown[1])), (0, 0, 255), 2)\r\n    \r\n    return ImgCoordinates, InsImage\r\n\r\n##############GHT part##################################################################################################################################\r\n#file_root = 'D:/Paper 1_Simulation experiment/Case1/Facade1'\r\nfile_root = IN[0]\r\nInsImage_root = file_root+'/UAV image'\r\nfile_list = os.listdir(InsImage_root)\r\nangle = 1\r\nangleRange = 1\r\nGPSError = (100,200)\r\nImgCoordinates = []\r\ni = 1\r\n\r\nfor img in file_list:\r\n    print('Processing Image ' + str(i))\r\n    i+=1\r\n    InsImage_path = file_root+'/UAV image/'+img\r\n    img_name = img[:img.rindex('.')]\r\n    TemImage_path = file_root+'/Template/'+img_name+'.jpg'\r\n    \r\n    InsImage = load_img(InsImage_path,1)\r\n    TemImage = load_img(TemImage_path,1)\r\n    InsImageGray = cv2.cvtColor(InsImage, cv2.COLOR_BGR2GRAY)\r\n    \r\n    ImgCoordinates, InsImage = hough(InsImageGray,TemImage,GPSError,angleRange, angle,img_name, InsImage, ImgCoordinates)\r\n    \r\n    result_path = file_root+'/Result/'+img_name+'.jpg'\r\n    cv2.imwrite(result_path,InsImage)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = [IN[0],ImgCoordinates]",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "f837dc639bc7468b83bee7838172c9a1",
      "Inputs": [
        {
          "Id": "bbc292e16616493faaee90af4487e8de",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "177a41890ae84bcc8aec45872f084525",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "46aed2b8-8090-488a-8b87-95420b751b1d-00056d79"
      ],
      "Id": "aa3e47ee4e9341f195e4020ac77a9f10",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2055c94e1e0543d9ae7776ba2215138b",
          "Name": "Element",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nboundingBox = IN[0]\r\n\r\n# Place your code below this line\r\nstartPoint = IN[0].MinPoint\r\nendPoint = IN[0].MaxPoint\r\n\r\nwidth = max([abs(startPoint.X - endPoint.X),abs(startPoint.Y - endPoint.Y)])\r\nheight = abs(startPoint.Z - endPoint.Z)-4010\r\n\r\nDimension = [width,height]\r\n# Assign your output to the OUT variable.\r\nOUT = Dimension",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "6a3e92f03b50439d8be38bd4930bb4ce",
      "Inputs": [
        {
          "Id": "3cc10b55a7fb49028df371d36517aed2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "91bc9ae621c344eebda59a2331a2a3fb",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\OneDrive - The University of Auckland\\Publications\\Paper 1\\Experiment\\Revit simulation\\Test\\UAV image GPS.xlsx",
      "InputValue": "..\\Experiment\\Revit simulation\\Test\\UAV image GPS.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "dd5c5555ed3b46adb76dc1ff16e2e17c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9d13c4007d64459e952e8cd9ca255e43",
          "Name": "",
          "Description": "File Path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "7267455affb34be3838115742b4a7b59",
      "Inputs": [
        {
          "Id": "79b426e3fc194f6ea3a301021aa06842",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fbf42e00264c4b2ca8f368104b827890",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "2d9551c3e72442729c3ff2cda23ccbd8",
      "Inputs": [
        {
          "Id": "89f3675479444c8e9b7c3423f7ad8fbe",
          "Name": "file",
          "Description": "File representing the Excel workbook\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0d6e05ed7b694c6fb9462a1db022d647",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "00e9e50fa455470b8676a49802bcedbe",
          "Name": "readAsStrings",
          "Description": "Toggle to read cells as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2c85b3fedfdd4ee4b4326f817285c52e",
          "Name": "showExcel",
          "Description": "Toggle to show excel's main window\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4fe973d75baf456989d46479e4682927",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Inspection\";",
      "Id": "3b2994f6bb2e4e6c9f15c2ee58d353b6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ef4961c57fa143d48342978c4942618c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Reference\";",
      "Id": "e4b690a1a2f6434398b2acedc1edf3cd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e256a442dc83468ea8ebc86b68341592",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportExcel@var,string,bool,bool",
      "Id": "031aa917d77549f08b07354cb549c756",
      "Inputs": [
        {
          "Id": "9afe3c5738e94342980023455621d21e",
          "Name": "file",
          "Description": "File representing the Excel workbook\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "63329653f3774bfc979cc9090e5ac1f2",
          "Name": "sheetName",
          "Description": "Name of the worksheet containing data\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c9dc821f60b14bafaa50eee0896e276a",
          "Name": "readAsStrings",
          "Description": "Toggle to read cells as strings\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "012e7897a0ea49b8873329032312f447",
          "Name": "showExcel",
          "Description": "Toggle to show excel's main window\n\nbool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c1cd90442cda4bec92f3e9a81cad4ed9",
          "Name": "data",
          "Description": "Rows of data from the Excel worksheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Read data from a Microsoft Excel spreadsheet. Data is read by row and returned in a series of lists by row. Rows and columns are zero-indexed; for example, the value in cell A1 will appear in the data list at [0,0]. This node requires Microsoft Excel to be installed.\n\nData.ImportExcel (file: var, sheetName: string, readAsStrings: bool = false, showExcel: bool = true): var[][]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "dab1c374b7b4437f94f7056ebf92aaa5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c248390ccc2444a28015fe341f2a7ca2",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2023, Cheng ZHANG\r\n\r\n# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n#导入revit节点，如果要使用revit节点中的方法\r\nclr.AddReference(\"RevitNodes\")\r\nfrom Revit.Elements import *\r\n\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\nimport numpy as np\r\nimport math\r\n\r\nimport random\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\nNameGPS = IN[0]\r\nelement1 = IN[1]\r\nB1 = IN[2]\r\nCameraView = []\r\nerrorGPS = 1\r\nerrorIMU = 1\r\n#Set distamce value to calulate target point based on view point\r\n\r\nfor temp in NameGPS:\r\n    ViewName = temp[0]\r\n    x1 = temp[1] + random.randint(1,2*errorGPS) - errorGPS\r\n    y1 = temp[2] + random.randint(1,2*errorGPS) - errorGPS\r\n    z1 = temp[3] + random.randint(1,2*errorGPS) - errorGPS\r\n    yaw = (temp[4] + random.randint(1,errorIMU))*math.pi/180\r\n    pitch = (temp[5] + random.randint(1,errorIMU))*math.pi/180\r\n    P1 = Point.ByCoordinates(x1,y1,z1)\r\n    x2 = x1 - 10000*np.sin(yaw)*np.cos(pitch)\r\n    y2 = y1 + 10000*np.cos(yaw)*np.cos(pitch)\r\n    z2 = z1 - 10000*np.sin(pitch)\r\n    P2 = Point.ByCoordinates(x2,y2,z2)\r\n    View = Views.PerspectiveView.ByEyePointAndTarget(P1,P2,element1,ViewName,B1)\r\n    CameraView.append(View)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = CameraView",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "b6399c89e9cd480b9f291210e34ec1e8",
      "Inputs": [
        {
          "Id": "2cb137d7d1934c1094396fc93e1bdda9",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4b4b08a3242c4da8b69b8605aa56a64b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "76f51ce5bc8d4f0983f262857d312da1",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1b18d2dade464088987d0a3c299f2f02",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2015, Konrad K Sobon\r\n# @arch_laboratory, http://archi-lab.net\r\n\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Import Element wrapper extension methods\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\n# Import geometry conversion extension methods\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\n# Import DocumentManager and TransactionManager\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\n\r\n# Import RevitAPI\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nimport System\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nimport sys\r\npyt_path = r'C:\\Program Files (x86)\\IronPython 2.7\\Lib'\r\nsys.path.append(pyt_path)\r\n\r\n#The inputs to this node will be stored as a list in the IN variable.\r\ndataEnteringNode = IN\r\n\r\nviews = UnwrapElement(IN[0])\r\n#filePath = IN[1]\r\nfilePath1 = IN[1]+'/BIM image'\r\nfilePath = filePath1 +'/'+'BIM'\r\nexportRange = System.Enum.Parse(Autodesk.Revit.DB.ExportRange, IN[2])\r\nfileType = System.Enum.Parse(Autodesk.Revit.DB.ImageFileType, IN[3])\r\nzoomType = System.Enum.Parse(Autodesk.Revit.DB.ZoomFitType, IN[4])\r\npixelSize = IN[5]\r\nimageRes = System.Enum.Parse(Autodesk.Revit.DB.ImageResolution, IN[6])\r\nzoom = IN[7]\r\nfitDirection = System.Enum.Parse(Autodesk.Revit.DB.FitDirectionType, IN[8])\r\nRunIt = IN[9]\r\n\r\ndef CreateViewSet(views):\r\n\tviewSet = List[ElementId]()\r\n\tfor i in views:\r\n\t\tviewSet.Add(i.Id)\r\n\treturn viewSet\r\n\r\nif RunIt:\r\n\ttry:\r\n\t\terrorReport = None\r\n\t\tieo = ImageExportOptions()\r\n\t\tieo.FilePath = filePath\r\n\t\t\r\n\t\tif fileType != None:\r\n\t\t\tieo.HLRandWFViewsFileType = fileType\r\n\t\t\r\n\t\tif zoomType != None:\r\n\t\t\tieo.ZoomType = zoomType\r\n\t\t\tif ieo.ZoomType == ZoomFitType.FitToPage:\r\n\t\t\t\tif imageRes != None:\r\n\t\t\t\t\tieo.ImageResolution = imageRes\r\n\t\t\t\tif pixelSize != None:\r\n\t\t\t\t\tieo.PixelSize = pixelSize\r\n\t\t\t\tif fitDirection != None:\r\n\t\t\t\t\tieo.FitDirection = fitDirection\r\n\t\t\telif ieo.ZoomType == ZoomType.Zoom:\r\n\t\t\t\tif zoom != None:\r\n\t\t\t\t\tieo.Zoom = zoom\r\n\t\t\r\n\t\tif len(views) > 1:\r\n\t\t\tieo.ExportRange = ExportRange.SetOfViews\r\n\t\t\tieo.SetViewsAndSheets(CreateViewSet(views))\r\n\t\telse:\r\n\t\t\tieo.ExportRange = exportRange\r\n\t\t\r\n\t\tTransactionManager.Instance.EnsureInTransaction(doc)\r\n\t\tdoc.ExportImage(ieo)\r\n\t\tTransactionManager.Instance.TransactionTaskDone()\r\n\texcept:\r\n\t\t# if error accurs anywhere in the process catch it\r\n\t\timport traceback\r\n\t\terrorReport = traceback.format_exc()\r\nelse:\r\n\terrorReport = \"RunIt is set to False.\"\r\n\r\n#Assign your output to the OUT variable\r\nif errorReport == None:\r\n\tOUT = IN[1]\r\nelse:\r\n\tOUT = errorReport",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "bda092cc6ae54ac3ab73a1cdbf9b36c5",
      "Inputs": [
        {
          "Id": "21f4ef81271346ec844c82a3de29c202",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6cbe3debe94a466fa0d1d5f3fd48d6b1",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f7ecda8795294bffb0de2cc36c07ada6",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "804d0cbee54b4a93a2b984d4472bbd78",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8874a16f79d64bcd996069956ddc612e",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "279e49aa56fa4c1ca621f33dfea63f12",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7a1c1452996f4a38a95e0ed791b65537",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8f24700eafdc4ce386d6e66f91bb33b9",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "82d983e008a244818a05d205dd0fbecc",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "662cb7e1d81c44b2bb0e2e4df219173f",
          "Name": "IN[9]",
          "Description": "Input #9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b83c2d82b8df458eb273a5a7480f8691",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2023, Cheng ZHANG\r\n\r\n# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport os\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\n\r\n# 输⼊⽂件夹地址\r\npath = IN[0]+'/BIM image'\r\nfiles = os.listdir(path)\r\n# 输出所有⽂件名，只是为了看⼀下\r\nfor file in files:\r\n    print(file)\r\n# 获取旧名和新名\r\ni = 0\r\nfor file in files:\r\n    # old 旧名称的信息\r\n    old = path + os.sep + files[i]\r\n    # new是新名称的信息，这⾥的操作是删除了最前⾯的'考拉很忙o - '共8个字符\r\n    new = path + os.sep + file.replace('BIM - 3D View - ','').replace('-jpg','')\r\n    # 新旧替换\r\n    os.rename(old,new)\r\n    i+=1\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = IN[0]",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "8278f6a57e1642b0b113b6aa646f0170",
      "Inputs": [
        {
          "Id": "02dc2b285f084849a5eb51c5f5b9fed2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7936d647b56b41179cc214a8014a76ce",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "ZoomPercentage = 100;",
      "Id": "f44e778d814343e7b812bb0e0398c32b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "61ee63550a4449ed9056797ca09cd2e2",
          "Name": "",
          "Description": "ZoomPercentage",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "archilabUI.ExportRangeUi, archilabUI2022",
      "SelectedIndex": 0,
      "SelectedString": "CurrentView",
      "NodeType": "ExtensionNode",
      "Id": "d3129e4f274e40fc8a14bda803ece778",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "211e59e04b24450080756f7262df0852",
          "Name": "exportRange",
          "Description": "The selected exportRange",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Retrieve all available Export Ranges from Revit project."
    },
    {
      "ConcreteType": "archilabUI.FitDirectionTypeUi, archilabUI2022",
      "SelectedIndex": 0,
      "SelectedString": "Horizontal",
      "NodeType": "ExtensionNode",
      "Id": "5ce544aff3284319947633ea7354b240",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5f6fff91c9734a96ac951100f6ee5e94",
          "Name": "fitDirectionType",
          "Description": "The selected fitDirectionType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Retrieve all available Fit Direction Types from Revit project."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "a92d4c153be54633b4c6bd97b83df689",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7219b2164dff4026ab55274412491ff2",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "archilabUI.ZoomFitTypeUi, archilabUI2022",
      "SelectedIndex": 0,
      "SelectedString": "FitToPage",
      "NodeType": "ExtensionNode",
      "Id": "64a88e4ae79048308f5009c7db90bf8c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cf857f2e95974d93b70712beb7b415b0",
          "Name": "zoomFitType",
          "Description": "The selected zoomFitType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Retrieve all available Zoom Fit Types from Revit project."
    },
    {
      "ConcreteType": "archilabUI.ImageResolutionUi, archilabUI2022",
      "SelectedIndex": 3,
      "SelectedString": "DPI_72",
      "NodeType": "ExtensionNode",
      "Id": "bcb44fe36c724113a4800e2f71435ecc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "58fb37a3e548414cad980e64f50e9631",
          "Name": "imageResolution",
          "Description": "The selected imageResolution",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Retrieve all available Image Resolutions from Revit project."
    },
    {
      "ConcreteType": "archilabUI.ImageFileTypeUi, archilabUI2022",
      "SelectedIndex": 1,
      "SelectedString": "JPEGLossless",
      "NodeType": "ExtensionNode",
      "Id": "363ec8fe049c487daa92606ea17b43fa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "58415186f1c241248d99b941159a9091",
          "Name": "imageFileType",
          "Description": "The selected imageFileType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Retrieve all available Image File Types from Revit project."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "8729b8b699ca4858867b5f22e759c189",
      "Inputs": [
        {
          "Id": "d7f4426bf1f247a38f44025d4669f9f4",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b64533eb909f4eb09ab3fe74eaa4f88b",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ae1e4f7bef0c47cab379c21894f60839",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "16a53fee-a422-4a3a-ad8b-0343d0349cb8",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "957f8e98f9154231bf24952fdb8f1b11",
      "Inputs": [
        {
          "Id": "257be0a56b3841f5a416ceb108bb0298",
          "Name": "PerspectiveViews",
          "Description": "Enter the perspective view(s)\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "23c8c9cce44d44608541a1dbccf0e63f",
          "Name": "HorizontalAngle",
          "Description": "Enter the angle (in degrees) you wish to have on the horizontal axis of the field of view\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e2c5dd4b75ec4f70978445084b251923",
          "Name": "VerticalAngle",
          "Description": "Enter the angle (in degrees) you wish to have on the vertical axis of the field of view\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1775be6e07624da1b661cb4cffe3daf7",
          "Name": "OUT",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Changes the field of view of perspective views. Enter degrees."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "pixel_x_dimension = 848;\npixel_y_dimension = 480;\nhorAngles = 60;\nvertAngles = horAngles*pixel_y_dimension/pixel_x_dimension;",
      "Id": "424a1e45ec004f549ff8fc97bcb7311a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e3ef2605a32645afaf0793f951b8684b",
          "Name": "",
          "Description": "pixel_x_dimension",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ceb077d650064404b16732ba2c3427cf",
          "Name": "",
          "Description": "pixel_y_dimension",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2c2f5e1e9f6409d919f816a3aa87859",
          "Name": "",
          "Description": "horAngles",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "becf4677a719425b937acf4c8c94ebff",
          "Name": "",
          "Description": "vertAngles",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2023, Cheng ZHANG\r\n\r\n# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport sys\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\nimport cv2 as cv\r\nimport numpy as np\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n\r\n# Place your code below this line\r\nfile_root = IN[0]+'/BIM image'\r\ntemplate_root = IN[0] +'/'+'Template'\r\nfile_list = os.listdir(file_root)\r\n\r\nfor img_name in file_list:\r\n    img_path = file_root+'/'+img_name\r\n    img = cv.imread(img_path)\r\n    imgray = cv.cvtColor(img, cv.COLOR_BGR2GRAY) #灰度图\r\n    gaussian = cv.GaussianBlur(imgray, (5, 5), 0)  #高斯图像去噪\r\n    edge = cv.Canny(gaussian,100,200,3) #Canny边缘检测\r\n    contours, hierarchy = cv.findContours(edge, cv.RETR_TREE, cv.CHAIN_APPROX_NONE) #轮廓检测\r\n    #通过是否存在父轮廓和子轮廓筛选闭合轮廓,进一步利用轮廓面积阈值筛选结构特征轮廓\r\n    contours_closed = []\r\n    hierarchy_list = hierarchy.tolist()\r\n    for i in range(len(hierarchy_list[0])):\r\n        if hierarchy_list[0][i][3] == -1: # 判断没有父轮廓\r\n            if hierarchy_list[0][i][2] != -1: #判断存在子轮廓\r\n                 if cv.contourArea(contours[i]) > 10000: #判断轮廓面积是否大于阈值\r\n                    contours_closed.append(contours[i])\r\n    \r\n    contour_final = []\r\n    contour_area = 0\r\n    for contour in contours_closed:\r\n        if cv.contourArea(contour) > contour_area:\r\n            contour_final = contour\r\n            contour_area = cv.contourArea(contour)\r\n    \r\n    contour_draw = []\r\n    contour_draw.append(contour_final)\r\n    #画出轮廓\r\n    mask=np.zeros(img.shape,np.uint8)\r\n    dst = cv.drawContours(mask, contour_draw, -1,(255, 255, 255), -1)\r\n    \r\n    realpath=template_root+'/'+img_name\r\n    cv.imwrite(realpath,dst)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = IN[0]",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "510a0f80124e467bb8b9095748e7c932",
      "Inputs": [
        {
          "Id": "5c313e92b88f41f99666046b3915b5ef",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "47eef9d266d1474a8239dd513ead2933",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2023, Cheng ZHANG\r\n\r\n# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport os\r\nsys.path.append('E:\\Anaconda\\envs\\MYGHT\\Lib\\site-packages')\r\n#localapp = os.getenv(r'LOCALAPPDATA')\r\n#sys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\nimport numpy as np\r\nimport cv2\r\nfrom matplotlib import pyplot as plt\r\nimport sys\r\n\r\nfile_root = IN[0][0]\r\nImgCoordinates = IN[0][1]\r\n\r\ndef load_img(name: str,mode: int) -> np.ndarray:\r\n    return cv2.imread(name, mode)\r\n\r\ndef PerspectiveTrans(inspectionImg, InspecImCoordinates, elevation, elevationCoord):\r\n    src = np.float32(InspecImCoordinates)\r\n    dst = np.float32(elevationCoord)\r\n    PerspectiveTransM = cv2.getPerspectiveTransform(src, dst)\r\n    \r\n    elevationSize = (elevation.shape[1], elevation.shape[0])\r\n    \r\n    PerspectiveResult = cv2.warpPerspective(inspectionImg, PerspectiveTransM, elevationSize, borderMode=cv2.BORDER_CONSTANT, borderValue=(0,0,0))\r\n    #PerspectiveResult = cv.warpPerspective(inspectionImg, PerspectiveTransM, elevationSize, borderMode=cv.BORDER_CONSTANT, borderValue=(255,255,255))\r\n    \r\n    return PerspectiveResult\r\n\r\nelevation_path = file_root+'/'+'elevation.jpg'\r\nelevation = cv2.imread(elevation_path)\r\n\r\nelevationCoord_path = file_root+'/'+'elevationCoordinates.npy'\r\nelevationCoordinates = np.load(elevationCoord_path)\r\nelevationCoordinates = elevationCoordinates.tolist()\r\n\r\nImage_Whole = np.ones(elevation.shape,np.uint8)*0\r\nx_range = [[0,1674],[1675,3350],[3351,5024],[5025,6697]]\r\ny_range = [[0,1321],[1322,2644],[2645,3965],[3966,5287],[5288,6609],[6610,7931],[7932,9253],[9254,10574],[10575,11896],[11897,13221]]\r\nfor i, ImgCoord in enumerate(ImgCoordinates):\r\n    print('Processing Perspective Transformation ' + str(i))\r\n    img_name = ImgCoord[0]\r\n    leftUp = ImgCoord[1]\r\n    leftDown = ImgCoord[2]\r\n    rightUp = ImgCoord[3]\r\n    rightDown = ImgCoord[4]\r\n    InsImage_path = file_root+'/UAV image/'+img_name+'.jpg'\r\n    inspectionImg = load_img(InsImage_path,1)\r\n    InspecImCoordinates = [leftUp, leftDown, rightUp, rightDown]\r\n    \r\n    elevationCoord = elevationCoordinates[i]\r\n    \r\n    PerspectiveResult = PerspectiveTrans(inspectionImg, InspecImCoordinates, elevation, elevationCoord)\r\n    Perspective_Path = file_root+'/Perspective/'+img_name+'.jpg'\r\n    cv2.imwrite(Perspective_Path,PerspectiveResult)\r\n    \r\n    row = int((i)/4)+1\r\n    colum = (i+1)%4\r\n    if colum == 0:\r\n        colum = 4\r\n    \r\n    mask = np.zeros(PerspectiveResult.shape[:2],np.uint8)\r\n    mask[y_range[row-1][0]:y_range[row-1][1],x_range[colum-1][0]:x_range[colum-1][1]] = 1\r\n    \r\n    PerspectiveResultMasked = cv2.bitwise_and(PerspectiveResult,PerspectiveResult,mask=mask)\r\n    Perspective_Path_new = file_root+'/Perspective_Croped/'+img_name+'.jpg'\r\n    cv2.imwrite(Perspective_Path_new,PerspectiveResultMasked)\r\n    \r\n    Image_Whole = cv2.add(Image_Whole,PerspectiveResultMasked)\r\n'''\r\n    for x in range(elevation.shape[1]-1):\r\n        for y in range(elevation.shape[0]-1):\r\n            if x < x_range[colum-1][0] or x > x_range[colum-1][1] or y < y_range[row-1][0] or y > y_range[row-1][1]:\r\n                PerspectiveResult[y,x] = (0,0,0)\r\n\r\n    Perspective_Path_new = file_root+'/Perspective_Croped/'+img_name+'.jpg'\r\n    cv2.imwrite(Perspective_Path_new,PerspectiveResultMasked)\r\n    \r\n    Image_Whole = cv2.add(Image_Whole,PerspectiveResultMasked)\r\n    '''\r\n\r\nperspective_whole_path = file_root+'.jpg'\r\ncv2.imwrite(perspective_whole_path,Image_Whole)\r\n# Assign your output to the OUT variable.\r\nOUT = perspective_whole_path",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "6be1a48d5696446ba68dc93d83be1fc2",
      "Inputs": [
        {
          "Id": "477b9e4585d64c5ab629c59f1ddfab96",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "58a762a92b6049bda486f19cc7bc6a09",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.NormalAtPoint@Autodesk.DesignScript.Geometry.Point",
      "Id": "1b6192189a8448908723c8c1fd7dc435",
      "Inputs": [
        {
          "Id": "1d65d45ca53645c081af18db9ccb8a68",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "769b4ebc7a064737860b945368b8ce3b",
          "Name": "point",
          "Description": "Point at which to evaluate surface normal\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "68bb2a28cc9f45cba77355db4cecebe8",
          "Name": "Vector",
          "Description": "Normal at point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the surface normal at the input Point on the Surface.\n\nSurface.NormalAtPoint (point: Point): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PointAtParameter@double,double",
      "Id": "215c9bf6969643158189f5140708e370",
      "Inputs": [
        {
          "Id": "2b6ac62449794915801fa2fe170edc17",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f14e6d9e179b4d5ea9742027bb4cb99b",
          "Name": "u",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fb9604643cbf43e0a6642d2313e23dce",
          "Name": "v",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a9bb01b7decc421cadecfaa327d617fc",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the Point at specified U and V parameters.\n\nSurface.PointAtParameter (u: double = 0, v: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;",
      "Id": "1785410a8794439984964d766c211b97",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4ab18d48a95741fe990d2978a08cb4a9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "8949e4e9cfd04b0583501aa73f2b15da",
      "Inputs": [
        {
          "Id": "354246688a76438fba0728bed9fd0704",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4fee9b77ce5b43769e12970330b851a7",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e8f9bb10b39f4af09cfe476b578d3e47",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Faces",
      "Id": "cb88d46aa8e04b4789a4439760ccc6af",
      "Inputs": [
        {
          "Id": "121b9cb61f3e49c7ae67178cd264c878",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b8248f3407fb4b5fb84999f952e57a28",
          "Name": "Surface[]",
          "Description": "Surface[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The Faces in this Element\n\nElement.Faces: Surface[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2023, Cheng ZHANG\r\n\r\n# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitServices')\r\n\r\nimport Autodesk\r\nimport RevitServices\r\n\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc =  DocumentManager.Instance.CurrentDBDocument\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\nsurfaces = IN[0]\r\nmaterial = UnwrapElement(IN[1])\r\n\r\n# Place your code below this line\r\ndef PaintFace(surf, mat):\r\n\tif not isinstance(surf, list):\r\n\t\telemRef = surf.Tags.LookupTag('RevitFaceReference')\r\n\t\telem = doc.GetElement(elemRef)\r\n\t\tface = elem.GetGeometryObjectFromReference(elemRef)\r\n\t\tif not (doc.IsPainted(elem.Id, face)):\r\n\t\t\tdoc.Paint(elem.Id, face, mat.Id)\r\n\t\t\treturn surf\r\n\telse:\r\n\t\t[PaintFace(i, mat) for i in surf]\r\n\t\treturn surf\r\n        \r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nOUT = PaintFace(surfaces, material)            \r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = 0",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "50b1bdb5d87e443599a8c6548517c7df",
      "Inputs": [
        {
          "Id": "ea8d55b49c204060bbbef8c84816f305",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fa63f05204b04bb78f4924fdd09d2b7b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "867667ae23524d61859127fe06cdf527",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Alban de Chasteigner 2018\n#twitter : @geniusloci_bim\n#geniusloci.bim@gmail.com\n#Inspired by Boris Shafiro from Autodesk\n#https://apidocs.co/apps/revit/2019/2e09391a-6aec-f47f-a4e6-bf354bb8629f.htm\n\nimport clr\nclr.AddReference('RevitAPI')\nfrom Autodesk.Revit.DB import *\nfrom Autodesk.Revit.DB.Visual import *\n\nclr.AddReference('RevitServices')\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\ndoc = DocumentManager.Instance.CurrentDBDocument\nuiapp = DocumentManager.Instance.CurrentUIApplication\napp = uiapp.Application\nversion=int(app.VersionNumber)\nclr.AddReference('RevitNodes')\nimport Revit\nclr.ImportExtensions(Revit.Elements)\nclr.ImportExtensions(Revit.GeometryConversion)\n\ndef toList(obj):\n    if hasattr(obj, '__iter__'): return obj\n    else: return [obj]\n    \nmats = toList(UnwrapElement(IN[0]))\nscaleWidht = IN[1]*12\nscaleHeight = IN[2]*12\npaths = toList(IN[3])\n\nif version < 2021:\n\tUIunit = doc.GetUnits().GetFormatOptions(UnitType.UT_Length).DisplayUnits\nelse:\n\tUIunit = doc.GetUnits().GetFormatOptions(SpecTypeId.Length).GetUnitTypeId()\n\nfor mat, path in zip(mats, paths):\n\tassetElem = doc.GetElement(mat.AppearanceAssetId)\n\tTransactionManager.Instance.EnsureInTransaction(doc)\n\twith Visual.AppearanceAssetEditScope(doc) as editScope:\n\t\teditableAsset = editScope.Start(assetElem.Id)\n\t\tif (editableAsset.FindByName(\"BaseSchema\")).Value == \"GenericSchema\":\n\t\t\tproperty = editableAsset.FindByName(Generic.GenericDiffuse)\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"CeramicSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"ceramic_color\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"ConcreteSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"concrete_color\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"MetallicPaintSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"metallicpaint_base_color\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"MasonryCMUSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"masonrycmu_color\")\t\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"PlasticVinylSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"plasticvinyl_color\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"HardwoodSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"hardwood_color\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"StoneSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"stone_color\")\t\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"SolidGlassSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"solidglass_transmittance_custom_color\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"PrismLayeredSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"layered_diffuse\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"PrismMetalSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"surface_roughness\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"PrismOpaqueSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"opaque_albedo\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"PrismTransparentSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"surface_roughness\")\n\t\tconnectedAsset = property.GetSingleConnectedAsset()\n\t\t\n\t\tif path == None:\n\t\t\tpass\n\t\telse:\t\n\t\t\tBitMapLocation = connectedAsset.FindByName(UnifiedBitmap.UnifiedbitmapBitmap) \n\t\t\tif BitMapLocation.IsValidValue(path):\n\t\t\t\t#AssetProperty String Object\n\t\t\t\tBitMapLocation.Value = path\n\t\tif scaleWidht == None:\n\t\t\tpass\n\t\telse:\t\t\n\t\t\tBitmapScaleX = connectedAsset.FindByName(UnifiedBitmap.TextureRealWorldScaleX)\n\t\t\tBitmapScaleX.Value = UnitUtils.ConvertToInternalUnits(scaleWidht, UIunit)\n\t\tif scaleHeight == None:\n\t\t\tpass\n\t\telse:\n\t\t\tBitmapScaleY = connectedAsset.FindByName(UnifiedBitmap.TextureRealWorldScaleY)\n\t\t\tBitmapScaleY.Value = UnitUtils.ConvertToInternalUnits(scaleHeight, UIunit)\n\n\t\teditScope.Commit(IFailuresPreprocessor)\n\tTransactionManager.Instance.TransactionTaskDone()\n\nOUT = IN[0]",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "9a502cab9d32452a94a7145b235f76e4",
      "Inputs": [
        {
          "Id": "1b868bc0bd33436db6f23be309e8eea4",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "55a2221b4cf84e5b9c381a7161c8f555",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f83fec5c88b546648af11228f43bd241",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bf34ef86cdaa4338bc60710c8e23f925",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e75d9d20e4964bb686a8a9c677c9765a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Material.ByName@string",
      "Id": "5079f53b8f0c43b79c5b4498da3af320",
      "Inputs": [
        {
          "Id": "2e793456717c4e409ba4b1fef5744df9",
          "Name": "name",
          "Description": "The name of the material\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ff5e9e99478a4bb6a281fec4dc2115a9",
          "Name": "Material",
          "Description": "Material",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Select a material from the current document by the name\n\nMaterial.ByName (name: string): Material"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"InspectionImage\";",
      "Id": "6cd709bd99dc4137a867c3af153543fa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "18b5e08b63a74c50873b46dd836cbf1b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Alban de Chasteigner 2020\n#twitter : @geniusloci_bim\n#geniusloci.bim@gmail.com\n\nimport clr\nclr.AddReference('RevitAPI')\nfrom Autodesk.Revit.DB import *\nclr.AddReference('RevitServices')\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\ndoc = DocumentManager.Instance.CurrentDBDocument\n\ndef toList(obj):\n    if hasattr(obj, '__iter__'): return obj\n    else: return [obj]\n    \nmats = toList(UnwrapElement(IN[0]))\npaths = toList(IN[1])\n\nfor mat, texturePath in zip(mats, paths):\n\tappearanceAssetId = mat.AppearanceAssetId\n\tassetElem = doc.GetElement(appearanceAssetId)\n\tTransactionManager.Instance.EnsureInTransaction(doc)\n\twith Visual.AppearanceAssetEditScope(doc) as editScope:\n\t\teditableAsset = editScope.Start(assetElem.Id)\n\t\tif (editableAsset.FindByName(\"BaseSchema\")).Value == \"GenericSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"generic_diffuse\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"CeramicSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"ceramic_color\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"ConcreteSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"concrete_color\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"MetallicPaintSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"metallicpaint_base_color\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"MasonryCMUSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"masonrycmu_color\")\t\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"PlasticVinylSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"plasticvinyl_color\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"HardwoodSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"hardwood_color\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"StoneSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"stone_color\")\t\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"SolidGlassSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"solidglass_transmittance_custom_color\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"PrismLayeredSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"layered_diffuse\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"PrismMetalSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"surface_roughness\")\t\t\t\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"PrismOpaqueSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"opaque_albedo\")\n\t\telif (editableAsset.FindByName(\"BaseSchema\")).Value == \"PrismTransparentSchema\":\n\t\t\tproperty = editableAsset.FindByName(\"surface_roughness\")\n\t\tif property.NumberOfConnectedProperties == 0 :\n\t\t\tproperty.AddConnectedAsset(\"UnifiedBitmapSchema\")\n\t\t\tconnectedAsset = property.GetConnectedProperty(0)\n\t\t\tpath = connectedAsset.FindByName(\"unifiedbitmap_Bitmap\")\n\t\t\tpath.Value = texturePath\n\t\t\teditScope.Commit(True)\n\tTransactionManager.Instance.TransactionTaskDone()\n\nif isinstance(IN[0], list): OUT = mats\nelse: OUT = mats[0]",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "a87c5e8b3c4644bf9b9566f1dce466ab",
      "Inputs": [
        {
          "Id": "a0f1557c53fc4d5dbab3c547c07188fe",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "94f557da19574fe39ebba783e05e6d0a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5280a20f000747bda98f2f1f923738f0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    }
  ],
  "Connectors": [
    {
      "Start": "c96188678b6f4a77ad23638b1f71a2fa",
      "End": "98f001c62d29484b83cc9e8c198ba71c",
      "Id": "b884d117e0dc419099fdf69b27629f81"
    },
    {
      "Start": "7329e0eceb8a4983a7515c45693dfc56",
      "End": "55a2221b4cf84e5b9c381a7161c8f555",
      "Id": "36997bc746f74a7c8267029148e538ef"
    },
    {
      "Start": "572afedf66ef45128ef82af003544f34",
      "End": "06041518765641f1b889a53196ac9cc6",
      "Id": "a1940c75ee874d73ad77d79891a11f5f"
    },
    {
      "Start": "572afedf66ef45128ef82af003544f34",
      "End": "f83fec5c88b546648af11228f43bd241",
      "Id": "997c4dc6e0114a149ea1897e0d4ef403"
    },
    {
      "Start": "b2c183a6e5424429898689069018955c",
      "End": "af28408b05b8412dada6f515c0047102",
      "Id": "c206bdd8e8a248d692647947bf777b74"
    },
    {
      "Start": "d08e7cc35f01494b99a797bcf900a6f7",
      "End": "e8c409a13c5147608c3c3b8845feddfa",
      "Id": "eef9a7e3ba204565801b501b9258e347"
    },
    {
      "Start": "7520c4cd00994461b3cb617e56ca42c3",
      "End": "de75e48eabe94ee9bc89fe785f7c2d20",
      "Id": "878a0bc693a24555ab045cf8303b83bc"
    },
    {
      "Start": "7520c4cd00994461b3cb617e56ca42c3",
      "End": "3cc10b55a7fb49028df371d36517aed2",
      "Id": "0b264fe4ef08469cbcfb7698c09fe970"
    },
    {
      "Start": "8d928237d99a43eb83933a6884d1d539",
      "End": "2e69e20aa4a8400790096c7f8d3c53d9",
      "Id": "1e58ad75a9844881bdc660aa3ae4c1d9"
    },
    {
      "Start": "e443720bab7247148dfbc216e7a8e3ae",
      "End": "89cda40e6f8e4326b2014c8928882d90",
      "Id": "1f85d2031f594a01893c4bc176e015ea"
    },
    {
      "Start": "4bb7a14b31264c8b87c2ea94204bf104",
      "End": "f388854dd11040aab86a6b88a5a9993b",
      "Id": "9161000fcce64218b31abb04b689f717"
    },
    {
      "Start": "396750b5881c49f6a479716dab0d22dd",
      "End": "6b3be2d27351417a8ce6425eaaba3eae",
      "Id": "7e94818a1b7847a1ae02b34ea7cb5b6c"
    },
    {
      "Start": "a86963fef3734d018cb96f2911cf61e2",
      "End": "0c3fdb0e3f9344278f6169c6717280e8",
      "Id": "9b4efd8e970f41b3a3540a417b4c16f8"
    },
    {
      "Start": "008ff618403c4905a97bc624f96bad46",
      "End": "ee3a53b5a8e849b5a077528bd7c0b168",
      "Id": "dbbadb80bad6477cb952b823e9c173c1"
    },
    {
      "Start": "83d82d5e3ecf42478a1a73b3c3c28253",
      "End": "90a15b0123aa45508b37658c6b3cd4ed",
      "Id": "e2cef694a4fd4a0e9f0d440b35ae0384"
    },
    {
      "Start": "83d82d5e3ecf42478a1a73b3c3c28253",
      "End": "6cbe3debe94a466fa0d1d5f3fd48d6b1",
      "Id": "9f11df5d1ea741adaa357c5a54c474df"
    },
    {
      "Start": "5f74066e375249fb9417bba224f732a5",
      "End": "00493bdf169d44239298bffba4a283fc",
      "Id": "084a05b2f3784e3dabd8186e86f49b1e"
    },
    {
      "Start": "22c99080d45140d4bfc72abfb65a0ee5",
      "End": "2cb137d7d1934c1094396fc93e1bdda9",
      "Id": "4cba203741dc4e92b627ad3cae0102a2"
    },
    {
      "Start": "177a41890ae84bcc8aec45872f084525",
      "End": "477b9e4585d64c5ab629c59f1ddfab96",
      "Id": "5aa740d8f04d4d9ca1baf245a1fb9bc6"
    },
    {
      "Start": "2055c94e1e0543d9ae7776ba2215138b",
      "End": "acace8ce6d884a8a91e9af2ec4d3a42f",
      "Id": "83fc5691d7e04e93acdd19358513632b"
    },
    {
      "Start": "2055c94e1e0543d9ae7776ba2215138b",
      "End": "4b4b08a3242c4da8b69b8605aa56a64b",
      "Id": "fe0c8594316c489f90d07ce970023865"
    },
    {
      "Start": "2055c94e1e0543d9ae7776ba2215138b",
      "End": "121b9cb61f3e49c7ae67178cd264c878",
      "Id": "bd1fcbe8cb394a54bb785b557fe7da72"
    },
    {
      "Start": "91bc9ae621c344eebda59a2331a2a3fb",
      "End": "ce947c693c1f478191b9ea235b3c69fa",
      "Id": "9625567c7e2d4c328e861ab31edca38c"
    },
    {
      "Start": "9d13c4007d64459e952e8cd9ca255e43",
      "End": "79b426e3fc194f6ea3a301021aa06842",
      "Id": "34a95f6c421442d99a472d097dd0737b"
    },
    {
      "Start": "fbf42e00264c4b2ca8f368104b827890",
      "End": "89f3675479444c8e9b7c3423f7ad8fbe",
      "Id": "2fb017b84a9b4996acb5af55d9c53584"
    },
    {
      "Start": "fbf42e00264c4b2ca8f368104b827890",
      "End": "9afe3c5738e94342980023455621d21e",
      "Id": "cd4a7fa122b24ae3a5530b038f0c0eff"
    },
    {
      "Start": "4fe973d75baf456989d46479e4682927",
      "End": "88ca3ead33f74441be946419184b65e9",
      "Id": "ff9f7952daa94657b4832fd1a0689a84"
    },
    {
      "Start": "ef4961c57fa143d48342978c4942618c",
      "End": "63329653f3774bfc979cc9090e5ac1f2",
      "Id": "0793fd2a477948048c9d62e3fc610117"
    },
    {
      "Start": "e256a442dc83468ea8ebc86b68341592",
      "End": "0d6e05ed7b694c6fb9462a1db022d647",
      "Id": "ec770308aef94fc1b667b478d0fbdb16"
    },
    {
      "Start": "c1cd90442cda4bec92f3e9a81cad4ed9",
      "End": "9f39ec121b5c4cd08ecdc57f358bfc45",
      "Id": "7468d7b8901d4133a76afc504ed651b5"
    },
    {
      "Start": "c248390ccc2444a28015fe341f2a7ca2",
      "End": "76f51ce5bc8d4f0983f262857d312da1",
      "Id": "726320d44a22451fa865c90d22c5f322"
    },
    {
      "Start": "1b18d2dade464088987d0a3c299f2f02",
      "End": "257be0a56b3841f5a416ceb108bb0298",
      "Id": "6760edaf0c4540619cb151bcb42b913a"
    },
    {
      "Start": "b83c2d82b8df458eb273a5a7480f8691",
      "End": "02dc2b285f084849a5eb51c5f5b9fed2",
      "Id": "6a98c1790c1d4d3f8637ee1049510945"
    },
    {
      "Start": "7936d647b56b41179cc214a8014a76ce",
      "End": "5c313e92b88f41f99666046b3915b5ef",
      "Id": "385be13efc724446a4c8c3fdb1ca0475"
    },
    {
      "Start": "61ee63550a4449ed9056797ca09cd2e2",
      "End": "8f24700eafdc4ce386d6e66f91bb33b9",
      "Id": "97159848c4b44b57bfab9c6e574309ad"
    },
    {
      "Start": "211e59e04b24450080756f7262df0852",
      "End": "f7ecda8795294bffb0de2cc36c07ada6",
      "Id": "f0320cc802c24fdb9e855a9848404d80"
    },
    {
      "Start": "5f6fff91c9734a96ac951100f6ee5e94",
      "End": "82d983e008a244818a05d205dd0fbecc",
      "Id": "62d558aa9e3b4514872fc8a4afed2ffb"
    },
    {
      "Start": "7219b2164dff4026ab55274412491ff2",
      "End": "662cb7e1d81c44b2bb0e2e4df219173f",
      "Id": "984deecd1e654595b0e2a61905bebf8d"
    },
    {
      "Start": "cf857f2e95974d93b70712beb7b415b0",
      "End": "8874a16f79d64bcd996069956ddc612e",
      "Id": "8dd3bde83998414bb985337bbad7c8c6"
    },
    {
      "Start": "58fb37a3e548414cad980e64f50e9631",
      "End": "7a1c1452996f4a38a95e0ed791b65537",
      "Id": "575d6fea0d564431924fd5dfaf9e5cbe"
    },
    {
      "Start": "58415186f1c241248d99b941159a9091",
      "End": "804d0cbee54b4a93a2b984d4472bbd78",
      "Id": "46786ec04b31448b9eb0b9198a351590"
    },
    {
      "Start": "ae1e4f7bef0c47cab379c21894f60839",
      "End": "21f4ef81271346ec844c82a3de29c202",
      "Id": "05d75fac388345908ec4558ede8fded6"
    },
    {
      "Start": "1775be6e07624da1b661cb4cffe3daf7",
      "End": "d7f4426bf1f247a38f44025d4669f9f4",
      "Id": "35d4e85e717b4a41938c8c24e93ff27b"
    },
    {
      "Start": "e3ef2605a32645afaf0793f951b8684b",
      "End": "279e49aa56fa4c1ca621f33dfea63f12",
      "Id": "7627fdcb06ce47159520d597468e889d"
    },
    {
      "Start": "d2c2f5e1e9f6409d919f816a3aa87859",
      "End": "23c8c9cce44d44608541a1dbccf0e63f",
      "Id": "ebc806e2b6274c9ebf93221e3edcbadb"
    },
    {
      "Start": "becf4677a719425b937acf4c8c94ebff",
      "End": "e2c5dd4b75ec4f70978445084b251923",
      "Id": "38352bdf0adb4718898e58504cf3d275"
    },
    {
      "Start": "47eef9d266d1474a8239dd513ead2933",
      "End": "bbc292e16616493faaee90af4487e8de",
      "Id": "03c253e3bb0f41f4b3b5bf203767a967"
    },
    {
      "Start": "58a762a92b6049bda486f19cc7bc6a09",
      "End": "bada8f1689a84aed80e82541611c3063",
      "Id": "52932d03ec42441c820092c3dfc4fd0f"
    },
    {
      "Start": "58a762a92b6049bda486f19cc7bc6a09",
      "End": "94f557da19574fe39ebba783e05e6d0a",
      "Id": "a03fc4efa88d402a8a07d68cba04182a"
    },
    {
      "Start": "a9bb01b7decc421cadecfaa327d617fc",
      "End": "769b4ebc7a064737860b945368b8ce3b",
      "Id": "bf804845bce248c288c7a6dd4d8d6393"
    },
    {
      "Start": "4ab18d48a95741fe990d2978a08cb4a9",
      "End": "4fee9b77ce5b43769e12970330b851a7",
      "Id": "4db348e4fd20465cabb2fc3d7800a761"
    },
    {
      "Start": "e8f9bb10b39f4af09cfe476b578d3e47",
      "End": "ea8d55b49c204060bbbef8c84816f305",
      "Id": "db265524851f41789e6e68d9dbeac801"
    },
    {
      "Start": "b8248f3407fb4b5fb84999f952e57a28",
      "End": "1d65d45ca53645c081af18db9ccb8a68",
      "Id": "cff24bcb9ccb46adb3460e12bc992817"
    },
    {
      "Start": "b8248f3407fb4b5fb84999f952e57a28",
      "End": "2b6ac62449794915801fa2fe170edc17",
      "Id": "7f200296ed9b4633bf5751fa8064c596"
    },
    {
      "Start": "b8248f3407fb4b5fb84999f952e57a28",
      "End": "354246688a76438fba0728bed9fd0704",
      "Id": "9764283da06547429c777bba1993f381"
    },
    {
      "Start": "e75d9d20e4964bb686a8a9c677c9765a",
      "End": "fa63f05204b04bb78f4924fdd09d2b7b",
      "Id": "26131f8dbc1a402eb6b1ba5fd8ed0393"
    },
    {
      "Start": "ff5e9e99478a4bb6a281fec4dc2115a9",
      "End": "a0f1557c53fc4d5dbab3c547c07188fe",
      "Id": "2de81ccfd6da4f0296ddfec63aaf7247"
    },
    {
      "Start": "18b5e08b63a74c50873b46dd836cbf1b",
      "End": "2e793456717c4e409ba4b1fef5744df9",
      "Id": "324fac2d62b74b1e8396902c574b79e0"
    },
    {
      "Start": "5280a20f000747bda98f2f1f923738f0",
      "End": "1b868bc0bd33436db6f23be309e8eea4",
      "Id": "cbcd4e2dadf743f3b882856617171188"
    }
  ],
  "Dependencies": [
    "16a53fee-a422-4a3a-ad8b-0343d0349cb8"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "archi-lab.net",
      "Version": "2022.212.3222",
      "ReferenceType": "Package",
      "Nodes": [
        "9850d26ce5f248058316ec9186812677",
        "3788fe2ec64b4fa68e1586925d5fe566",
        "737cc21ab93b41f181ddc38723b9020c",
        "570fe59bd68d4da1acba976fe372ef4a",
        "54c5083059a140df86f4a09046e595bb",
        "d3129e4f274e40fc8a14bda803ece778",
        "5ce544aff3284319947633ea7354b240",
        "64a88e4ae79048308f5009c7db90bf8c",
        "bcb44fe36c724113a4800e2f71435ecc",
        "363ec8fe049c487daa92606ea17b43fa"
      ]
    },
    {
      "Name": "Morpheus",
      "Version": "2019.8.26",
      "ReferenceType": "Package",
      "Nodes": [
        "957f8e98f9154231bf24952fdb8f1b11"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.12",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "1.10",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.12.1.8246",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -21.690056545194238,
      "EyeY": 29.064513081684709,
      "EyeZ": 72.6686193512287,
      "LookX": 16.689361572265625,
      "LookY": -18.080141067504883,
      "LookZ": -80.6652603149414,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "66fb21d4c37c4eab9a3508c820d27056",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3380.0424530722012,
        "Y": 2524.0353640206868
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "d3bcdac7cd3d4222898669cfb64557e7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3806.7139984208479,
        "Y": 2395.2821447868328
      },
      {
        "ShowGeometry": true,
        "Name": "Views",
        "Id": "b6ef88e43f0a4d7ea758f8d133378dc8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3164.4797037725766,
        "Y": 2188.3076062317205
      },
      {
        "ShowGeometry": true,
        "Name": "Element Center",
        "Id": "d3a3cbcb7ba741bcb0a81270f80c0487",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3058.1901271559232,
        "Y": 2409.2938976589326
      },
      {
        "ShowGeometry": true,
        "Name": "Element.BoundingBox",
        "Id": "308173a2814545d0984fc47b395ada9e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2802.2332124580412,
        "Y": 2307.5526289919
      },
      {
        "ShowGeometry": true,
        "Name": "Box Placement Types",
        "Id": "9850d26ce5f248058316ec9186812677",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2801.21106467852,
        "Y": 2431.5107635174036
      },
      {
        "ShowGeometry": true,
        "Name": "ImageInstances.Create",
        "Id": "3788fe2ec64b4fa68e1586925d5fe566",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3507.9320073709646,
        "Y": 2218.3290374046128
      },
      {
        "ShowGeometry": true,
        "Name": "ImagePlacementOptions.Create",
        "Id": "737cc21ab93b41f181ddc38723b9020c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3298.0403028678629,
        "Y": 2402.6349944963035
      },
      {
        "ShowGeometry": true,
        "Name": "ImageTypes.Create",
        "Id": "570fe59bd68d4da1acba976fe372ef4a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3107.8485805314917,
        "Y": 2289.8632066722171
      },
      {
        "ShowGeometry": true,
        "Name": "ImageTypeOptions.Create",
        "Id": "54c5083059a140df86f4a09046e595bb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2797.4360104042712,
        "Y": 2195.3776916954803
      },
      {
        "ShowGeometry": true,
        "Name": "Reference BIM Coordinates",
        "Id": "99592d45a3d944db8927c6f80f75b076",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1486.6082962311325,
        "Y": 2677.35530213093
      },
      {
        "ShowGeometry": true,
        "Name": "Inspection Image Path",
        "Id": "33c4ffb150724a5691462efde0af596c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1314.6413642724451,
        "Y": 2191.5930803828273
      },
      {
        "ShowGeometry": true,
        "Name": "Transfer Matrix",
        "Id": "2b8bbe888fa548a6b19f9c8b553c7c6c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -873.05882046845306,
        "Y": 2309.2774838439846
      },
      {
        "ShowGeometry": true,
        "Name": "Transfer GPS and IMU into Pyhsical Parameters in BIM",
        "Id": "bec8cc6fbb244913907ed61c05177f1a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -648.34531072114987,
        "Y": 2227.9449065842005
      },
      {
        "ShowGeometry": true,
        "Name": "GHT-based Component Detection",
        "Id": "f837dc639bc7468b83bee7838172c9a1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2102.4275075029104,
        "Y": 2214.2614351011853
      },
      {
        "ShowGeometry": true,
        "Name": "Inspected Facade",
        "Id": "aa3e47ee4e9341f195e4020ac77a9f10",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1261.139587334181,
        "Y": 2767.0220129410036
      },
      {
        "ShowGeometry": true,
        "Name": "Element Dimension",
        "Id": "6a3e92f03b50439d8be38bd4930bb4ce",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3125.4341412902181,
        "Y": 2523.917478361448
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "dd5c5555ed3b46adb76dc1ff16e2e17c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1885.6310304576612,
        "Y": 2439.1917074914554
      },
      {
        "ShowGeometry": true,
        "Name": "File From Path",
        "Id": "7267455affb34be3838115742b4a7b59",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1497.6732170924106,
        "Y": 2479.9617887957925
      },
      {
        "ShowGeometry": true,
        "Name": "Data.ImportExcel",
        "Id": "2d9551c3e72442729c3ff2cda23ccbd8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1318.594616168627,
        "Y": 2503.9605858521245
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "3b2994f6bb2e4e6c9f15c2ee58d353b6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1571.6481992873653,
        "Y": 2341.5876521414184
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e4b690a1a2f6434398b2acedc1edf3cd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1518.7478319860431,
        "Y": 2582.8351609131923
      },
      {
        "ShowGeometry": true,
        "Name": "Data.ImportExcel",
        "Id": "031aa917d77549f08b07354cb549c756",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1318.6524028052522,
        "Y": 2332.4841310557013
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "dab1c374b7b4437f94f7056ebf92aaa5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -164.89193569978204,
        "Y": 2323.6241883074695
      },
      {
        "ShowGeometry": true,
        "Name": "CreatePerspectiveViews",
        "Id": "b6399c89e9cd480b9f291210e34ec1e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 0.9565430243104629,
        "Y": 2217.809171108348
      },
      {
        "ShowGeometry": true,
        "Name": "ExportTemplateImage",
        "Id": "bda092cc6ae54ac3ab73a1cdbf9b36c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1414.8089868367674,
        "Y": 2204.5296648208614
      },
      {
        "ShowGeometry": true,
        "Name": "ReviseFileName",
        "Id": "8278f6a57e1642b0b113b6aa646f0170",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1664.6534482246666,
        "Y": 2206.725844523347
      },
      {
        "ShowGeometry": true,
        "Name": "Zoom Percentage",
        "Id": "f44e778d814343e7b812bb0e0398c32b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 991.9026603051733,
        "Y": 2449.4352494530517
      },
      {
        "ShowGeometry": true,
        "Name": "Export Range",
        "Id": "d3129e4f274e40fc8a14bda803ece778",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1018.8575049332629,
        "Y": 2250.4198386854468
      },
      {
        "ShowGeometry": true,
        "Name": "Fit Direction Type",
        "Id": "5ce544aff3284319947633ea7354b240",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 982.849675288593,
        "Y": 2534.9203050276219
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "a92d4c153be54633b4c6bd97b83df689",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1014.5310403563534,
        "Y": 2622.1138881744123
      },
      {
        "ShowGeometry": true,
        "Name": "Zoom Fit Type",
        "Id": "64a88e4ae79048308f5009c7db90bf8c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 783.01635634480306,
        "Y": 2370.2862293299172
      },
      {
        "ShowGeometry": true,
        "Name": "Image Resolution",
        "Id": "bcb44fe36c724113a4800e2f71435ecc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 741.00857052982417,
        "Y": 2453.1035647227222
      },
      {
        "ShowGeometry": true,
        "Name": "Image File Type",
        "Id": "363ec8fe049c487daa92606ea17b43fa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 729.81632326210126,
        "Y": 2262.9858574103159
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "8729b8b699ca4858867b5f22e759c189",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 734.54009847855389,
        "Y": 2138.8320798122559
      },
      {
        "ShowGeometry": true,
        "Name": "PerspectiveView.SetFieldOfView",
        "Id": "957f8e98f9154231bf24952fdb8f1b11",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 355.20409726688342,
        "Y": 2366.0807498394574
      },
      {
        "ShowGeometry": true,
        "Name": "Camera Parameters",
        "Id": "424a1e45ec004f549ff8fc97bcb7311a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -165.96304101401336,
        "Y": 2516.2418213880724
      },
      {
        "ShowGeometry": true,
        "Name": "ContourDetection",
        "Id": "510a0f80124e467bb8b9095748e7c932",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1849.597690806525,
        "Y": 2205.7715914986629
      },
      {
        "ShowGeometry": true,
        "Name": "Perspective Transformation",
        "Id": "6be1a48d5696446ba68dc93d83be1fc2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2434.85853313021,
        "Y": 2214.2801853833544
      },
      {
        "ShowGeometry": true,
        "Name": "Surface.NormalAtPoint",
        "Id": "1b6192189a8448908723c8c1fd7dc435",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3260.0019285054805,
        "Y": 2929.741994608788
      },
      {
        "ShowGeometry": true,
        "Name": "Surface.PointAtParameter",
        "Id": "215c9bf6969643158189f5140708e370",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2951.1227117230405,
        "Y": 2923.2386638783778
      },
      {
        "ShowGeometry": true,
        "Name": "Surface Index",
        "Id": "1785410a8794439984964d766c211b97",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3322.8907693057804,
        "Y": 2834.4739058368382
      },
      {
        "ShowGeometry": true,
        "Name": "List.GetItemAtIndex",
        "Id": "8949e4e9cfd04b0583501aa73f2b15da",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3502.1373223878504,
        "Y": 2781.555857648968
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Faces",
        "Id": "cb88d46aa8e04b4789a4439760ccc6af",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2852.7239441432603,
        "Y": 2775.9192434467782
      },
      {
        "ShowGeometry": true,
        "Name": "Paint Surface with Material",
        "Id": "50b1bdb5d87e443599a8c6548517c7df",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3814.8452428375904,
        "Y": 3016.9966130376579
      },
      {
        "ShowGeometry": true,
        "Name": "Change Material Image Size",
        "Id": "9a502cab9d32452a94a7145b235f76e4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3459.4836368514702,
        "Y": 3081.6113104600481
      },
      {
        "ShowGeometry": true,
        "Name": "Material.ByName",
        "Id": "5079f53b8f0c43b79c5b4498da3af320",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2898.6200887955806,
        "Y": 3093.1958994889478
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6cd709bd99dc4137a867c3af153543fa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2662.67010974134,
        "Y": 3089.7290957111281
      },
      {
        "ShowGeometry": true,
        "Name": "Add Image To Material",
        "Id": "a87c5e8b3c4644bf9b9566f1dce466ab",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3156.7051721723406,
        "Y": 3085.0905692517381
      }
    ],
    "Annotations": [
      {
        "Id": "75ecd627d75e41849032de4653184d04",
        "Title": "Paint 3D model with inspection image (orthophoto)",
        "Nodes": [
          "a87c5e8b3c4644bf9b9566f1dce466ab",
          "6cd709bd99dc4137a867c3af153543fa",
          "5079f53b8f0c43b79c5b4498da3af320",
          "9a502cab9d32452a94a7145b235f76e4",
          "50b1bdb5d87e443599a8c6548517c7df",
          "cb88d46aa8e04b4789a4439760ccc6af",
          "8949e4e9cfd04b0583501aa73f2b15da",
          "1785410a8794439984964d766c211b97",
          "215c9bf6969643158189f5140708e370",
          "1b6192189a8448908723c8c1fd7dc435"
        ],
        "Left": 2652.67010974134,
        "Top": 2722.7192434467784,
        "Width": 1399.37513309625,
        "Height": 540.29206701326984,
        "FontSize": 36.0,
        "InitialTop": 2775.9192434467782,
        "InitialHeight": 462.27665604216963,
        "TextblockHeight": 43.2,
        "Background": "#FFC1D676"
      },
      {
        "Id": "26a0652a9a1a43a5bd010eef1205ea10",
        "Title": "Import Orthophoto into 2D view",
        "Nodes": [
          "66fb21d4c37c4eab9a3508c820d27056",
          "d3bcdac7cd3d4222898669cfb64557e7",
          "b6ef88e43f0a4d7ea758f8d133378dc8",
          "d3a3cbcb7ba741bcb0a81270f80c0487",
          "308173a2814545d0984fc47b395ada9e",
          "9850d26ce5f248058316ec9186812677",
          "3788fe2ec64b4fa68e1586925d5fe566",
          "737cc21ab93b41f181ddc38723b9020c",
          "570fe59bd68d4da1acba976fe372ef4a",
          "54c5083059a140df86f4a09046e595bb",
          "6a3e92f03b50439d8be38bd4930bb4ce"
        ],
        "Left": 2787.4360104042712,
        "Top": 2135.1076062317206,
        "Width": 1298.0779880165769,
        "Height": 508.7277577889663,
        "FontSize": 36.0,
        "InitialTop": 2188.3076062317205,
        "InitialHeight": 480.7277577889663,
        "TextblockHeight": 43.2,
        "Background": "#FFC1D676"
      },
      {
        "Id": "4b5d0c2ca3e04fa09b7df562d593ec5b",
        "Title": "Configure virtual camera and export BIM template images",
        "Nodes": [
          "dab1c374b7b4437f94f7056ebf92aaa5",
          "b6399c89e9cd480b9f291210e34ec1e8",
          "bda092cc6ae54ac3ab73a1cdbf9b36c5",
          "8278f6a57e1642b0b113b6aa646f0170",
          "f44e778d814343e7b812bb0e0398c32b",
          "d3129e4f274e40fc8a14bda803ece778",
          "5ce544aff3284319947633ea7354b240",
          "a92d4c153be54633b4c6bd97b83df689",
          "64a88e4ae79048308f5009c7db90bf8c",
          "bcb44fe36c724113a4800e2f71435ecc",
          "363ec8fe049c487daa92606ea17b43fa",
          "8729b8b699ca4858867b5f22e759c189",
          "957f8e98f9154231bf24952fdb8f1b11",
          "424a1e45ec004f549ff8fc97bcb7311a",
          "510a0f80124e467bb8b9095748e7c932"
        ],
        "Left": -175.96304101401336,
        "Top": 2085.6320798122561,
        "Width": 2205.1607318205383,
        "Height": 604.28180836215643,
        "FontSize": 36.0,
        "InitialTop": 2138.8320798122559,
        "InitialHeight": 628.28180836215643,
        "TextblockHeight": 43.2,
        "Background": "#FFC1D676"
      },
      {
        "Id": "151c499ab1434e3db13e292ef4c68fe6",
        "Title": "Transfer GPS/IMU into BIM",
        "Nodes": [
          "2b8bbe888fa548a6b19f9c8b553c7c6c",
          "bec8cc6fbb244913907ed61c05177f1a"
        ],
        "Left": -883.05882046845306,
        "Top": 2174.7449065842006,
        "Width": 642.31350974730321,
        "Height": 264.73257725978374,
        "FontSize": 36.0,
        "InitialTop": 2227.9449065842005,
        "InitialHeight": 226.3325772597841,
        "TextblockHeight": 43.2,
        "Background": "#FFC1D676"
      }
    ],
    "X": 394.72206655580976,
    "Y": -173.55013673856058,
    "Zoom": 0.18371405695107176
  }
}